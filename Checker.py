import os
import logging
import re
import random
import time
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import requests
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8204086100:AAFmfYGPLqtBpSpJk1FgyCwU87l6K2ZieTo"
CRYPTO_BOT_TOKEN = "470734:AAKKe0DuwX6a5WvXEUnsGGBrRSbyN3YJvxH"
CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api/"
ADMIN_USERNAME = "@pirkw"

logging.basicConfig(level=logging.INFO)

class CryptoPayment:
    def __init__(self):
        self.api_url = CRYPTO_BOT_API_URL
        self.token = CRYPTO_BOT_TOKEN
        self.headers = {
            'Crypto-Pay-API-Token': self.token,
            'Content-Type': 'application/json'
        }
    
    async def create_invoice(self, amount: float, description: str, user_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        try:
            payload = {
                'asset': 'USDT',  # USDT –≤ —Å–µ—Ç–∏ Tron (TRC-20)
                'amount': str(amount),
                'description': description,
                'hidden_message': f'–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
                'paid_btn_name': 'viewItem',
                'paid_btn_url': 'https://t.me/your_bot',
                'payload': str(user_id),
                'allow_comments': False,
                'allow_anonymous': False,
                'expires_in': 86400,  # 24 —á–∞—Å–∞
                'subscription': True  # –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —Å—á–µ—Ç
            }
            
            response = requests.post(
                f"{self.api_url}createInvoice",
                headers=self.headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return True, data['result']
                else:
                    return False, f"–û—à–∏–±–∫–∞ API: {data.get('error', 'Unknown error')}"
            else:
                return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {str(e)}"
    
    async def check_invoice_status(self, invoice_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞"""
        try:
            response = requests.get(
                f"{self.api_url}getInvoices?invoice_ids={invoice_id}",
                headers=self.headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok') and data['result']['items']:
                    invoice = data['result']['items'][0]
                    return True, invoice
                else:
                    return False, "–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

class RobloxCookieChecker:
    def __init__(self):
        self.valid_count = 0
        self.checked_count = 0
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/120.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0'
        ]
        self.user_cookies = {}
        self.subscriptions = {}
        self.free_trials = {}
        self.crypto_payment = CryptoPayment()
        self.subscription_price = 1.0  # 1 USDT ‚âà 75 —Ä—É–±–ª–µ–π
        
    def get_random_user_agent(self):
        return random.choice(self.user_agents)
    
    def make_robust_request(self, url, headers, max_retries=3):
        for attempt in range(max_retries):
            try:
                response = requests.get(url, headers=headers, timeout=15)
                if response.status_code == 429:
                    wait_time = (2 ** attempt) + random.uniform(1, 3)
                    print(f"‚ö†Ô∏è Rate limit hit, waiting {wait_time:.1f}s...")
                    time.sleep(wait_time)
                    continue
                return response
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è Request error (attempt {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    wait_time = (2 ** attempt) + random.uniform(1, 2)
                    time.sleep(wait_time)
        return None

    def check_free_trial(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        if user_id not in self.free_trials:
            # –î–∞–µ–º 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.free_trials[user_id] = {
                'start_date': datetime.now(),
                'end_date': datetime.now() + timedelta(days=3),
                'checks_count': 0
            }
            return True, "‚úÖ –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 3 –¥–Ω—è!"
        
        trial_data = self.free_trials[user_id]
        
        if datetime.now() > trial_data['end_date']:
            return False, "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 1 USDT (‚âà75‚ÇΩ)"
        
        trial_data['checks_count'] += 1
        days_left = (trial_data['end_date'] - datetime.now()).days
        return True, f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"

    def activate_subscription(self, user_id):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        self.subscriptions[user_id] = {
            'activated_date': datetime.now(),
            'is_active': True,
            'payment_method': 'cryptobot'
        }
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        if user_id in self.free_trials:
            del self.free_trials[user_id]

    def extract_cookies_from_text(self, text):
        cookies = []
        warning_pattern = r'_\|WARNING:-DO-NOT-SHARE-THIS[^\s]+(?:\|[^\s]*)*'
        warning_matches = re.findall(warning_pattern, text)
        
        for match in warning_matches:
            cookie_candidate = match.strip()
            if len(cookie_candidate) > 50:
                cookies.append(cookie_candidate)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫—É–∫–∏: {cookie_candidate[:80]}...")
        
        if not cookies:
            clean_text = text.strip()
            if (len(clean_text) > 300 and 
                '_|WARNING:-DO-NOT-SHARE-THIS' in clean_text and
                'Sharing-this-will-allow-someone-to-log-in-as-you' in clean_text):
                cookies.append(clean_text)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —á–∏—Å—Ç–∞—è –∫—É–∫–∏: {clean_text[:80]}...")
        
        return cookies

    def clean_cookie_string(self, cookie_data):
        return cookie_data.strip()

    def simple_cookie_validation(self, cookie_data):
        self.checked_count += 1
        cookie_clean = self.clean_cookie_string(cookie_data)
        
        if not cookie_clean.startswith('.ROBLOSECURITY='):
            cookie_string = f'.ROBLOSECURITY={cookie_clean}'
        else:
            cookie_string = cookie_clean
        
        user_agent = self.get_random_user_agent()
        headers = {
            'User-Agent': user_agent,
            'Cookie': cookie_string,
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://www.roblox.com/',
            'Origin': 'https://www.roblox.com'
        }
        
        time.sleep(random.uniform(1, 3))
        
        try:
            api_url = 'https://users.roblox.com/v1/users/authenticated'
            response = self.make_robust_request(api_url, headers)
            
            if response and response.status_code == 200:
                user_data = response.json()
                if 'id' in user_data and user_data['id'] > 0:
                    username = user_data.get('name', 'Unknown')
                    user_id = user_data['id']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username, user_id
                
            mobile_headers = headers.copy()
            mobile_headers['User-Agent'] = 'Roblox/iOS'
            mobile_url = 'https://www.roblox.com/mobileapi/userinfo'
            mobile_response = self.make_robust_request(mobile_url, mobile_headers)
            
            if mobile_response and mobile_response.status_code == 200:
                mobile_data = mobile_response.json()
                if 'UserID' in mobile_data and mobile_data['UserID'] > 0:
                    username = mobile_data.get('UserName', 'Unknown')
                    user_id = mobile_data['UserID']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username, user_id
            
            home_response = self.make_robust_request('https://www.roblox.com/home', headers)
            
            if home_response and home_response.status_code == 200:
                current_url = home_response.url.lower()
                if 'login' not in current_url and 'signup' not in current_url:
                    self.valid_count += 1
                    return True, cookie_clean, "‚úÖ VALID - Home page access", "Unknown", "Unknown"
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False, cookie_clean, f"‚ùå ERROR - {str(e)}", "Unknown", "Unknown"
        
        return False, cookie_clean, "‚ùå INVALID - All checks failed", "Unknown", "Unknown"

    def process_multiple_cookies(self, text, user_id):
        cookies = self.extract_cookies_from_text(text)
        valid_cookies = []
        invalid_cookies = []
        results = []
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ: {len(cookies)}")
        
        total = len(cookies)
        if total == 0:
            return [], [], "‚ùå –í —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫—É–∫–∏"
        
        self.user_cookies[user_id] = {
            'all_cookies': cookies,
            'valid_cookies': [],
            'invalid_cookies': [],
            'usernames': [],
            'user_ids': []
        }
        
        for i, cookie in enumerate(cookies, 1):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏ {i}/{total}")
            is_valid, clean_cookie, status, username, user_id_val = self.simple_cookie_validation(cookie)
            
            if is_valid:
                valid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['valid_cookies'].append(clean_cookie)
                self.user_cookies[user_id]['usernames'].append(username)
                self.user_cookies[user_id]['user_ids'].append(user_id_val)
                results.append(f"‚úÖ {i}/{total}: {status}")
            else:
                invalid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['invalid_cookies'].append(clean_cookie)
                results.append(f"‚ùå {i}/{total}: {status}")
        
        return valid_cookies, invalid_cookies, "\n".join(results)

    def create_individual_files(self, user_id):
        if user_id not in self.user_cookies:
            return None
        
        user_data = self.user_cookies[user_id]
        valid_cookies = user_data['valid_cookies']
        usernames = user_data['usernames']
        
        if not valid_cookies:
            return None
        
        import zipfile
        timestamp = datetime.now().strftime("%H%M%S")
        zip_filename = f"individual_cookies_{user_id}_{timestamp}.zip"
        
        with zipfile.ZipFile(zip_filename, 'w') as zipf:
            for i, (cookie, username) in enumerate(zip(valid_cookies, usernames), 1):
                safe_username = re.sub(r'[^\w\-_]', '_', username)
                filename = f"cookie_{i}_{safe_username}.txt"
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(cookie)
                
                zipf.write(filename, filename)
                os.remove(filename)
        
        return zip_filename

    def get_command_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–∫–∏", callback_data="check_cookies"),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription_info"),
             InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_command")]
        ]
        return InlineKeyboardMarkup(keyboard)

checker = RobloxCookieChecker()

async def show_trial_window(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    user_id = update.effective_user.id
    
    trial_text = """
üéÅ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ü–†–û–ë–ù–´–ô –ü–ï–†–ò–û–î

–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫

–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ - –≤—Å–µ–≥–æ 1 USDT (‚âà75‚ÇΩ)
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="start_free_trial")],
        [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 1 USDT", callback_data="buy_subscription")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="cancel_trial")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if hasattr(update, 'message'):
        await update.message.reply_text(trial_text, reply_markup=reply_markup)
    else:
        await update.edit_message_text(trial_text, reply_markup=reply_markup)

async def create_payment_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    amount = checker.subscription_price
    
    success, result = await checker.crypto_payment.create_invoice(
        amount=amount,
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–∫–∏ (–Ω–∞–≤—Å–µ–≥–¥–∞)",
        user_id=user_id
    )
    
    if success:
        invoice_url = result['pay_url']
        invoice_id = result['invoice_id']
        
        payment_text = f"""
üíé –û–ü–õ–ê–¢–ê –ü–û–î–ü–ò–°–ö–ò

–°—É–º–º–∞: {amount} USDT (‚âà75‚ÇΩ)
–°–µ—Ç—å: TRC-20 (Tron)
–°—Ç–∞—Ç—É—Å: –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —Å—á–µ—Ç

–î–ª—è –æ–ø–ª–∞—Ç—ã:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"
2. –û–ø–ª–∞—Ç–∏—Ç–µ {amount} USDT
3. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç {ADMIN_USERNAME}

–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
        """
        
        keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=invoice_url)],
            [InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", url=f"https://t.me/{ADMIN_USERNAME[1:]}")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'message'):
            await update.message.reply_text(payment_text, reply_markup=reply_markup)
        else:
            await update.edit_message_text(payment_text, reply_markup=reply_markup)
    else:
        error_text = f"""
‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–ß–ï–¢–ê

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å {ADMIN_USERNAME}

–û—à–∏–±–∫–∞: {result}
        """
        await update.edit_message_text(error_text)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_trial_window(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    if user_id in checker.subscriptions and checker.subscriptions[user_id]['is_active']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        await process_cookie_check(update, user_id)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    has_trial, trial_message = checker.check_free_trial(user_id)
    
    if not has_trial:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_text = f"""
üíé –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ü–ò–°–ö–ê

–í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.

–í—Å–µ–≥–æ 1 USDT (‚âà75‚ÇΩ) –∑–∞Ê∞∏‰πÖ (–Ω–∞–≤—Å–µ–≥–¥–∞)! ‚úÖ

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–∫–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
        """
        
        keyboard = [
            [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 1 USDT", callback_data="buy_subscription")],
            [InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data="subscription_details")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(subscription_text, reply_markup=reply_markup)
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    await process_cookie_check(update, user_id)

async def process_cookie_check(update: Update, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–∫–∏"""
    if update.message.text:
        text_content = update.message.text
        await update.message.reply_text("üîç –ò—â—É –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ...")
        
        valid_cookies, invalid_cookies, process_results = checker.process_multiple_cookies(text_content, user_id)
        
        if not valid_cookies and not invalid_cookies:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if user_id in checker.free_trials:
            trial_data = checker.free_trials[user_id]
            days_left = (trial_data['end_date'] - datetime.now()).days
            checks_count = trial_data['checks_count']
            
            trial_info = f"\nüéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:\n‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–¥–µ–ª–∞–Ω–æ: {checks_count}"
        else:
            trial_info = "\nüíé –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        
        summary = f"""
üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:

‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(valid_cookies) + len(invalid_cookies)}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/(len(valid_cookies) + len(invalid_cookies))*100:.1f}%
{trial_info}
        """
        
        keyboard = [
            [InlineKeyboardButton("üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–∞–π–ª–∞–º", callback_data="distribute_files")],
            [InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –æ–±—â–∏–π —Ñ–∞–π–ª", callback_data="download_combined")]
        ]
        
        if user_id in checker.free_trials:
            keyboard.append([InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 1 USDT", callback_data="buy_subscription")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(summary, reply_markup=reply_markup)

    elif update.message.document:
        file = await update.message.document.get_file()
        file_path = f"temp_{user_id}.txt"
        await file.download_to_drive(file_path)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            file_content = f.read()
        
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        valid_cookies, invalid_cookies, process_results = checker.process_multiple_cookies(file_content, user_id)
        
        if not valid_cookies and not invalid_cookies:
            await update.message.reply_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫—É–∫–∏")
            os.remove(file_path)
            return
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        await update.message.reply_text("‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        os.remove(file_path)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "start_free_trial":
        has_trial, trial_message = checker.check_free_trial(user_id)
        await query.edit_message_text(
            f"üéÅ {trial_message}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!\n\n"
            f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º."
        )
    
    elif query.data == "buy_subscription":
        await create_payment_invoice(query, context, user_id)
    
    elif query.data.startswith("check_payment_"):
        invoice_id = int(query.data.split("_")[2])
        await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...")
        
        success, result = await checker.crypto_payment.check_invoice_status(invoice_id)
        
        if success and result.get('status') == 'paid':
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            checker.activate_subscription(user_id)
            await query.edit_message_text(
                "‚úÖ –û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n"
                "üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
            )
        else:
            await query.edit_message_text(
                "‚ùå –û–ü–õ–ê–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê\n\n"
                "–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É:\n"
                "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã " + ADMIN_USERNAME + "\n"
                "3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n\n"
                "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"
            )
    
    elif query.data == "subscription_info":
        await show_trial_window(query, context)
    
    elif query.data == "show_stats":
        stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–û–ö:

‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checker.checked_count}
‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏: {checker.valid_count}
‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.checked_count - checker.valid_count}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.valid_count/max(1, checker.checked_count)*100:.1f}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(checker.subscriptions)}
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(checker.free_trials)}
        """
        await query.edit_message_text(
            stats_text,
            reply_markup=checker.get_command_keyboard()
        )
    
    elif query.data == "check_cookies":
        await query.edit_message_text(
            "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç —Å –∫—É–∫–∏\n"
            "‚Ä¢ –§–∞–π–ª .txt —Å –∫—É–∫–∏\n"
            "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –∫—É–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
            reply_markup=checker.get_command_keyboard()
        )
    
    elif query.data in ["distribute_files", "download_combined"]:
        if query.data == "distribute_files":
            await query.edit_message_text("üìÅ –°–æ–∑–¥–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫—É–∫–∏...")
            zip_filename = checker.create_individual_files(user_id)
            if zip_filename and os.path.exists(zip_filename):
                with open(zip_filename, 'rb') as zip_file:
                    await query.message.reply_document(
                        document=zip_file,
                        caption=f"üìÅ –ê—Ä—Ö–∏–≤ —Å {len(checker.user_cookies[user_id]['valid_cookies'])} –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∫—É–∫–∏"
                    )
                os.remove(zip_filename)
            else:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        
        elif query.data == "download_combined":
            # –õ–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞
            pass
    
    elif query.data in ["cancel_trial", "back_to_trial", "subscription_details"]:
        await show_trial_window(query, context)
    
    elif query.data == "help_command":
        help_text = f"""
‚ÑπÔ∏è –ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º
2. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏:
‚Ä¢ 1 USDT (‚âà75‚ÇΩ) –∑–∞Ê∞∏‰πÖ (–Ω–∞–≤—Å–µ–≥–¥–∞)
‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Crypto Bot (USDT TRC-20)
‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç {ADMIN_USERNAME}

–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {ADMIN_USERNAME}
        """
        await query.edit_message_text(
            help_text,
            reply_markup=checker.get_command_keyboard()
        )

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    print("ü§ñ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Roblox –∫—É–∫–∏ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
