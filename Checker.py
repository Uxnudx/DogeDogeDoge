import os
import logging
import re
import random
import time
import requests
import uuid
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7585671071:AAHQqLCFqpC-0Xf1IB965_d33-rPbTAhj8A"
CRYPTOBOT_TOKEN = "470734:AAKKe0DuwX6a5WvXEUnsGGBrRSbyN3YJvxH"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# –¢–∞—Ä–∏—Ñ—ã (–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã)
PRICES = {
    '15rub': {
        'name': 'üîì –î–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å',
        'amount': 15,
        'description': '1 –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É–∫–∏'
    },
    '100rub': {
        'name': 'üîì –î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π', 
        'amount': 100,
        'description': '30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É–∫–∏'
    }
}

logging.basicConfig(level=logging.INFO)

class CryptoBotPayment:
    def __init__(self, token):
        self.token = token
        self.base_url = "https://pay.crypt.bot/api"
        
    def create_invoice(self, amount, description="–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É–∫–∏"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoBot"""
        headers = {
            "Crypto-Pay-API-Token": self.token,
            "Content-Type": "application/json"
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ USDT (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å)
        usdt_amount = round(amount / 90, 2)  # ~90 —Ä—É–± –∑–∞ USDT
        
        payload = {
            "amount": usdt_amount,
            "asset": "USDT",
            "description": description,
            "paid_btn_name": "viewItem",
            "paid_btn_url": f"https://t.me/{BOT_TOKEN.split(':')[0]}",
            "payload": str(uuid.uuid4()),
            "allow_comments": False,
            "allow_anonymous": False
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/createInvoice", 
                json=payload, 
                headers=headers,
                timeout=10
            )
            data = response.json()
            
            if data.get('ok'):
                return {
                    'success': True,
                    'invoice_id': data['result']['invoice_id'],
                    'pay_url': data['result']['pay_url'],
                    'amount': usdt_amount
                }
            else:
                return {'success': False, 'error': data.get('description')}
                
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def check_invoice(self, invoice_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞"""
        headers = {
            "Crypto-Pay-API-Token": self.token
        }
        
        try:
            response = requests.get(
                f"{self.base_url}/getInvoices?invoice_ids={invoice_id}", 
                headers=headers,
                timeout=10
            )
            data = response.json()
            
            if data.get('ok') and data.get('result'):
                invoice = data['result'][0]
                return {
                    'status': invoice['status'],
                    'paid': invoice['status'] == 'paid',
                    'amount': invoice['amount'],
                    'created_at': invoice['created_at']
                }
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
            return None

class UserManager:
    def __init__(self):
        self.users_file = "paid_users.json"
        self.pending_payments_file = "pending_payments.json"
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open(self.users_file, 'r') as f:
                self.paid_users = json.load(f)
        except:
            self.paid_users = {}
            
        try:
            with open(self.pending_payments_file, 'r') as f:
                self.pending_payments = json.load(f)
        except:
            self.pending_payments = {}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        with open(self.users_file, 'w') as f:
            json.dump(self.paid_users, f, indent=2)
        with open(self.pending_payments_file, 'w') as f:
            json.dump(self.pending_payments, f, indent=2)
    
    def add_pending_payment(self, user_id, price_key, invoice_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        self.pending_payments[str(user_id)] = {
            'price_key': price_key,
            'invoice_id': invoice_id,
            'created_at': datetime.now().timestamp()
        }
        self.save_data()
    
    def get_pending_payment(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        return self.pending_payments.get(str(user_id))
    
    def remove_pending_payment(self, user_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        if str(user_id) in self.pending_payments:
            del self.pending_payments[str(user_id)]
            self.save_data()
    
    def activate_access(self, user_id, price_key):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        price_info = PRICES[price_key]
        
        if price_key == '15rub':
            expiry_days = 1
        else:  # 100rub
            expiry_days = 30
            
        expiry_date = datetime.now() + timedelta(days=expiry_days)
        
        self.paid_users[str(user_id)] = {
            'price_key': price_key,
            'activated_date': datetime.now().timestamp(),
            'expiry_date': expiry_date.timestamp(),
            'amount': price_info['amount']
        }
        self.save_data()
        
        return expiry_date
    
    def is_user_active(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        user_data = self.paid_users.get(str(user_id))
        if not user_data:
            return False
            
        if datetime.now().timestamp() > user_data['expiry_date']:
            # –î–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫
            del self.paid_users[str(user_id)]
            self.save_data()
            return False
            
        return True

class RobloxCookieChecker:
    def __init__(self):
        self.valid_count = 0
        self.checked_count = 0
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        ]
        self.user_manager = UserManager()
        self.cryptobot = CryptoBotPayment(CRYPTOBOT_TOKEN)
        
    def get_random_user_agent(self):
        return random.choice(self.user_agents)
    
    def make_robust_request(self, url, headers, max_retries=3):
        for attempt in range(max_retries):
            try:
                response = requests.get(url, headers=headers, timeout=15)
                if response.status_code == 429:
                    wait_time = (2 ** attempt) + random.uniform(1, 3)
                    time.sleep(wait_time)
                    continue
                return response
            except:
                if attempt < max_retries - 1:
                    time.sleep(2)
        return None

    def extract_cookies_from_text(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É–∫–∏"""
        cookies = []
        pattern = r'_\\|WARNING:-DO-NOT-SHARE-THIS[^\\s]*'
        matches = re.findall(pattern, text)
        
        for match in matches:
            cookie_text = match.strip()
            if len(cookie_text) > 50 and '_|WARNING:-DO-NOT-SHARE-THIS' in cookie_text:
                cookies.append(cookie_text)
        
        return cookies

    def simple_cookie_validation(self, cookie_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏"""
        self.checked_count += 1
        cookie_clean = cookie_data.strip()
        
        if not cookie_clean.startswith('.ROBLOSECURITY='):
            cookie_string = f'.ROBLOSECURITY={cookie_clean}'
        else:
            cookie_string = cookie_clean
            
        headers = {
            'User-Agent': self.get_random_user_agent(),
            'Cookie': cookie_string
        }
        
        try:
            api_url = 'https://users.roblox.com/v1/users/authenticated'
            response = self.make_robust_request(api_url, headers)
            
            if response and response.status_code == 200:
                user_data = response.json()
                if 'id' in user_data and user_data['id'] > 0:
                    self.valid_count += 1
                    return True, cookie_clean
            
            home_response = self.make_robust_request('https://www.roblox.com/home', headers)
            if home_response and home_response.status_code == 200:
                current_url = home_response.url.lower()
                if 'login' not in current_url and 'signup' not in current_url:
                    self.valid_count += 1
                    return True, cookie_clean
        
        except:
            pass
        
        return False, cookie_clean

    def process_multiple_cookies(self, text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–∫–∏"""
        cookies = self.extract_cookies_from_text(text)
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫—É–∫–∏: {len(cookies)}")
        
        total = len(cookies)
        if total == 0:
            return [], [], "‚ùå –ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not self.user_manager.is_user_active(user_id):
            return [], [], "payment_required", ""
        
        valid_cookies = []
        invalid_cookies = []
        results = []
        
        for i, cookie in enumerate(cookies, 1):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏ {i}/{total}")
            is_valid, clean_cookie = self.simple_cookie_validation(cookie)
            
            if is_valid:
                valid_cookies.append(clean_cookie)
                results.append(f"‚úÖ {i}/{total}: –í–∞–ª–∏–¥–Ω–∞—è")
            else:
                invalid_cookies.append(clean_cookie)
                results.append(f"‚ùå {i}/{total}: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è")
        
        report = f"""üîç **–û–¢–ß–ï–¢ –ü–†–û–í–ï–†–ö–ò**

‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/total*100:.1f}%"""
        
        return valid_cookies, invalid_cookies, "\n".join(results), report

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
checker = RobloxCookieChecker()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if checker.user_manager.is_user_active(user_id):
        user_data = checker.user_manager.paid_users[str(user_id)]
        expiry_date = datetime.fromtimestamp(user_data['expiry_date'])
        expiry_str = expiry_date.strftime("%d.%m.%Y")
        
        await update.message.reply_text(
            f"‚úÖ **–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {expiry_str}**\n\n"
            f"üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!"
        )
    else:
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="show_prices")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîç **Roblox Cookie Checker**\n\n"
            "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø\n\n"
            "üí∞ **–¢–∞—Ä–∏—Ñ—ã:**\n"
            "‚Ä¢ 15‚ÇΩ - 1 –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞\n"  
            "‚Ä¢ 100‚ÇΩ - 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞\n\n"
            "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot",
            reply_markup=reply_markup
        )

async def show_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    keyboard = []
    for price_key, price_info in PRICES.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{price_info['name']} - {price_info['amount']}‚ÇΩ", 
                callback_data=f"buy_{price_key}"
            )
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üí∞ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:**\n\n"
        "üîì **1 –¥–µ–Ω—å** - 15‚ÇΩ\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 24 —á–∞—Å–∞\n\n"
        "üîì **30 –¥–Ω–µ–π** - 100‚ÇΩ\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ @CryptoBot",
        reply_markup=reply_markup
    )

async def buy_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price_key = query.data.replace('buy_', '')
    price_info = PRICES.get(price_key)
    user_id = query.from_user.id
    
    if not price_info:
        await query.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ CryptoBot
    invoice = checker.cryptobot.create_invoice(
        amount=price_info['amount'],
        description=price_info['description']
    )
    
    if not invoice.get('success'):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂
    checker.user_manager.add_pending_payment(user_id, price_key, invoice['invoice_id'])
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ CryptoBot", url=invoice['pay_url'])],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice['invoice_id']}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_prices")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üí∞ **–°—á–µ—Ç –Ω–∞ {price_info['amount']}‚ÇΩ**\n\n"
        f"üìù {price_info['description']}\n\n"
        f"üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
        f"1. –ù–∞–∂–º–∏—Ç–µ 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ CryptoBot'\n"
        f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤ –±–æ—Ç–µ\n" 
        f"3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
        reply_markup=reply_markup
    )

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    invoice_id = query.data.replace('check_', '')
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    invoice_status = checker.cryptobot.check_invoice(invoice_id)
    
    if not invoice_status:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    if invoice_status['paid']:
        # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        pending_payment = checker.user_manager.get_pending_payment(user_id)
        if pending_payment:
            expiry_date = checker.user_manager.activate_access(user_id, pending_payment['price_key'])
            checker.user_manager.remove_pending_payment(user_id)
            
            expiry_str = expiry_date.strftime("%d.%m.%Y")
            price_info = PRICES[pending_payment['price_key']]
            
            await query.edit_message_text(
                f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**\n\n"
                f"üí∞ –°—É–º–º–∞: {price_info['amount']}‚ÇΩ\n"
                f"üìÖ –î–æ—Å—Ç—É–ø –¥–æ: {expiry_str}\n"
                f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∏: –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ\n\n"
                f"üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!"
            )
        else:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        await query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    if data == "show_prices":
        await show_prices(update, context)
    elif data.startswith("buy_"):
        await buy_access(update, context)
    elif data.startswith("check_"):
        await check_payment(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if update.message.document or (update.message.text and len(update.message.text) > 100):
        
        if not checker.user_manager.is_user_active(user_id):
            keyboard = [[InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="show_prices")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå **–ù–µ–æ–±—Ö–æ–¥–∏–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø**\n\n"
                "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–∫–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø:",
                reply_markup=reply_markup
            )
            return
        
        if update.message.text:
            text_content = update.message.text
            await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏...")
            
            valid_cookies, invalid_cookies, process_results, report = checker.process_multiple_cookies(text_content, user_id)
            
            if process_results == "payment_required":
                return
            
            await update.message.reply_text(report)
            await send_results(update, user_id, valid_cookies, invalid_cookies)

        elif update.message.document:
            file = await update.message.document.get_file()
            file_path = f"temp_{user_id}.txt"
            await file.download_to_drive(file_path)
            
            with open(file_path, 'r', encoding='utf-8') as f:
                file_content = f.read()
            
            await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞...")
            
            valid_cookies, invalid_cookies, process_results, report = checker.process_multiple_cookies(file_content, user_id)
            
            if process_results == "payment_required":
                os.remove(file_path)
                return
            
            await update.message.reply_text(report)
            await send_results(update, user_id, valid_cookies, invalid_cookies)
            os.remove(file_path)

async def send_results(update, user_id, valid_cookies, invalid_cookies):
    timestamp = datetime.now().strftime("%H%M%S")
    
    if valid_cookies:
        valid_filename = f"valid_{user_id}_{timestamp}.txt"
        with open(valid_filename, 'w', encoding='utf-8') as f:
            for cookie in valid_cookies:
                f.write(cookie + '\n\n')
        
        await update.message.reply_document(
            document=open(valid_filename, 'rb'),
            caption=f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏: {len(valid_cookies)} —à—Ç."
        )
        os.remove(valid_filename)
    
    if invalid_cookies:
        invalid_filename = f"invalid_{user_id}_{timestamp}.txt"
        with open(invalid_filename, 'w', encoding='utf-8') as f:
            for cookie in invalid_cookies:
                f.write(cookie + '\n\n')
        
        await update.message.reply_document(
            document=open(invalid_filename, 'rb'),
            caption=f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏: {len(invalid_cookies)} —à—Ç."
        )
        os.remove(invalid_filename)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL, handle_message))
    
    print("ü§ñ –ë–æ—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π –∑–∞–ø—É—â–µ–Ω!")
    print("üí∞ –°—á–µ—Ç–∞: 15‚ÇΩ (1 –¥–µ–Ω—å), 100‚ÇΩ (30 –¥–Ω–µ–π)")
    print("üí≥ CryptoBot API: " + ("‚úÖ" if CRYPTOBOT_TOKEN != "–í–ê–®_CRYPTOBOT_API_TOKEN" else "‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù"))
    app.run_polling()

if __name__ == "__main__":
    main()e: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    
    if checker.user_manager.can_use_trial(user_id):
        expiry_date = checker.user_manager.activate_trial(user_id)
        expiry_str = expiry_date.strftime("%d.%m.%Y")
        
        await query.edit_message_text(
            f"üéâ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            f"‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è (–¥–æ {expiry_str})\n"
            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∏: –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ\n\n"
            f"üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏!"
        )
    else:
        await query.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)

async def show_tariffs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    keyboard = []
    
    if checker.user_manager.can_use_trial(update.effective_user.id):
        keyboard.append([InlineKeyboardButton("üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –ë–ï–°–ü–õ–ê–¢–ù–û", callback_data="get_trial")])
    
    for tariff_id, tariff in TARIFFS.items():
        if tariff_id != 'trial' and tariff['price_rub'] > 0:
            keyboard.append([InlineKeyboardButton(f"{tariff['name']} - {tariff['price_rub']}‚ÇΩ", callback_data=f"buy_{tariff_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üíé **–¢–∞—Ä–∏—Ñ—ã:**\n\n"
        "üÜì **–ü—Ä–æ–±–Ω—ã–π** - 3 –¥–Ω—è ‚Ä¢ –ë–ï–°–ü–õ–ê–¢–ù–û\n\n"
        "ü•à **30 –¥–Ω–µ–π** - 50‚ÇΩ\n\n"
        "ü•á **VIP** - 100‚ÇΩ ‚Ä¢ –ù–∞–≤—Å–µ–≥–¥–∞\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ @CryptoBot",
        reply_markup=reply_markup
    )

async def buy_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    tariff_id = query.data.replace('buy_', '')
    tariff = TARIFFS.get(tariff_id)
    
    reply_markup = create_payment_keyboard(tariff_id)
    
    await query.edit_message_text(
        f"üíé **–¢–∞—Ä–∏—Ñ {tariff['name']}**\n\n"
        f"üíµ –°—É–º–º–∞: {tariff['price_rub']}‚ÇΩ\n"
        f"üìÖ –°—Ä–æ–∫: {tariff['days']} –¥–Ω–µ–π\n"
        f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∏: –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ\n\n"
        f"üëá –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ @CryptoBot\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'",
        reply_markup=reply_markup
    )

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    tariff_id = query.data.replace('confirm_', '')
    user_id = query.from_user.id
    
    checker.user_manager.add_premium_user(user_id, tariff_id)
    
    await query.edit_message_text(
        f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n"
        f"üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    if data == "show_tariffs":
        await show_tariffs(update, context)
    elif data == "get_trial":
        await get_trial_command(update, context)
    elif data.startswith("buy_"):
        await buy_tariff(update, context)
    elif data.startswith("confirm_"):
        await confirm_payment(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if update.message.document or (update.message.text and len(update.message.text) > 100):
        
        if not checker.user_manager.is_user_active(user_id):
            keyboard = [
                [InlineKeyboardButton("üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="get_trial")],
                [InlineKeyboardButton("üíé –¢–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå **–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–∫–∏:",
                reply_markup=reply_markup
            )
            return
        
        if update.message.text:
            text_content = update.message.text
            await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏...")
            
            valid_cookies, invalid_cookies, process_results, report = checker.process_multiple_cookies(text_content, user_id)
            
            if process_results == "payment_required":
                return
            
            await update.message.reply_text(report)
            await send_results(update, user_id, valid_cookies, invalid_cookies)

        elif update.message.document:
            file = await update.message.document.get_file()
            file_path = f"temp_{user_id}.txt"
            await file.download_to_drive(file_path)
            
            with open(file_path, 'r', encoding='utf-8') as f:
                file_content = f.read()
            
            await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞...")
            
            valid_cookies, invalid_cookies, process_results, report = checker.process_multiple_cookies(file_content, user_id)
            
            if process_results == "payment_required":
                os.remove(file_path)
                return
            
            await update.message.reply_text(report)
            await send_results(update, user_id, valid_cookies, invalid_cookies)
            os.remove(file_path)

async def send_results(update, user_id, valid_cookies, invalid_cookies):
    timestamp = datetime.now().strftime("%H%M%S")
    
    if valid_cookies:
        valid_filename = f"valid_{user_id}_{timestamp}.txt"
        with open(valid_filename, 'w', encoding='utf-8') as f:
            for cookie in valid_cookies:
                f.write(cookie + '\n\n')
        
        await update.message.reply_document(
            document=open(valid_filename, 'rb'),
            caption=f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏: {len(valid_cookies)} —à—Ç."
        )
        os.remove(valid_filename)
    
    if invalid_cookies:
        invalid_filename = f"invalid_{user_id}_{timestamp}.txt"
        with open(invalid_filename, 'w', encoding='utf-8') as f:
            for cookie in invalid_cookies:
                f.write(cookie + '\n\n')
        
        await update.message.reply_document(
            document=open(invalid_filename, 'rb'),
            caption=f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏: {len(invalid_cookies)} —à—Ç."
        )
        os.remove(invalid_filename)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL, handle_message))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üíé –¢–∞—Ä–∏—Ñ—ã: 50‚ÇΩ (30 –¥–Ω–µ–π), 100‚ÇΩ (VIP)")
    app.run_polling()

if __name__ == "__main__":
    main()    
    def make_robust_request(self, url, headers, max_retries=3):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                response = requests.get(url, headers=headers, timeout=15)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                if response.status_code == 429:
                    wait_time = (2 ** attempt) + random.uniform(1, 3)
                    print(f"‚ö†Ô∏è Rate limit hit, waiting {wait_time:.1f}s...")
                    time.sleep(wait_time)
                    continue
                    
                return response
                
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è Request error (attempt {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    wait_time = (2 ** attempt) + random.uniform(1, 2)
                    time.sleep(wait_time)
                    
        return None

    def extract_cookies_from_text(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        cookies = []
        
        # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
        warning_pattern = r'_\|WARNING:-DO-NOT-SHARE-THIS[^\s]+(?:\|[^\s]*)*'
        warning_matches = re.findall(warning_pattern, text)
        
        for match in warning_matches:
            cookie_candidate = match.strip()
            if len(cookie_candidate) > 50:
                cookies.append(cookie_candidate)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫—É–∫–∏: {cookie_candidate[:80]}...")
        
        # –ú–µ—Ç–æ–¥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —á–∏—Å—Ç–æ–π –∫—É–∫–∏
        if not cookies:
            clean_text = text.strip()
            if (len(clean_text) > 300 and 
                '_|WARNING:-DO-NOT-SHARE-THIS' in clean_text and
                'Sharing-this-will-allow-someone-to-log-in-as-you' in clean_text):
                cookies.append(clean_text)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —á–∏—Å—Ç–∞—è –∫—É–∫–∏: {clean_text[:80]}...")
        
        return cookies

    def clean_cookie_string(self, cookie_data):
        """–û—á–∏—Å—Ç–∫–∞ –∫—É–∫–∏"""
        return cookie_data.strip()

    def simple_cookie_validation(self, cookie_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏"""
        self.checked_count += 1
        
        cookie_clean = self.clean_cookie_string(cookie_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ
        if not cookie_clean.startswith('.ROBLOSECURITY='):
            cookie_string = f'.ROBLOSECURITY={cookie_clean}'
        else:
            cookie_string = cookie_clean
        
        # –°–ª—É—á–∞–π–Ω—ã–π User-Agent –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        user_agent = self.get_random_user_agent()
        headers = {
            'User-Agent': user_agent,
            'Cookie': cookie_string,
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://www.roblox.com/',
            'Origin': 'https://www.roblox.com'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(random.uniform(1, 3))
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
            api_url = 'https://users.roblox.com/v1/users/authenticated'
            response = self.make_robust_request(api_url, headers)
            
            if response and response.status_code == 200:
                user_data = response.json()
                if 'id' in user_data and user_data['id'] > 0:
                    username = user_data.get('name', 'Unknown')
                    user_id = user_data['id']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username
                
            # –ü—Ä–æ–±—É–µ–º mobile API —Å –¥—Ä—É–≥–∏–º User-Agent
            mobile_headers = headers.copy()
            mobile_headers['User-Agent'] = 'Roblox/iOS'
            mobile_url = 'https://www.roblox.com/mobileapi/userinfo'
            mobile_response = self.make_robust_request(mobile_url, mobile_headers)
            
            if mobile_response and mobile_response.status_code == 200:
                mobile_data = mobile_response.json()
                if 'UserID' in mobile_data and mobile_data['UserID'] > 0:
                    username = mobile_data.get('UserName', 'Unknown')
                    user_id = mobile_data['UserID']
                    self.valid_count += 1
                    return True, cookie_clean, f"‚úÖ VALID - User: {username} (ID: {user_id})", username
            
            # –ü—Ä–æ–±—É–µ–º –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            home_response = self.make_robust_request('https://www.roblox.com/home', headers)
            
            if home_response and home_response.status_code == 200:
                current_url = home_response.url.lower()
                if 'login' not in current_url and 'signup' not in current_url:
                    self.valid_count += 1
                    return True, cookie_clean, "‚úÖ VALID - Home page access", "Unknown"
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False, cookie_clean, f"‚ùå ERROR - {str(e)}", "Unknown"
        
        return False, cookie_clean, "‚ùå INVALID - All checks failed", "Unknown"

    def process_multiple_cookies(self, text, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        cookies = self.extract_cookies_from_text(text)
        valid_cookies = []
        invalid_cookies = []
        results = []
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ: {len(cookies)}")
        
        total = len(cookies)
        if total == 0:
            return [], [], "‚ùå –í —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫—É–∫–∏"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_cookies[user_id] = {
            'all_cookies': cookies,
            'valid_cookies': [],
            'invalid_cookies': [],
            'usernames': []
        }
        
        for i, cookie in enumerate(cookies, 1):
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–∫–∏ {i}/{total}")
            is_valid, clean_cookie, status, username = self.simple_cookie_validation(cookie)
            
            if is_valid:
                valid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['valid_cookies'].append(clean_cookie)
                self.user_cookies[user_id]['usernames'].append(username)
                results.append(f"‚úÖ {i}/{total}: {status}")
            else:
                invalid_cookies.append(clean_cookie)
                self.user_cookies[user_id]['invalid_cookies'].append(clean_cookie)
                results.append(f"‚ùå {i}/{total}: {status}")
        
        return valid_cookies, invalid_cookies, "\n".join(results)

    def create_individual_files(self, user_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫—É–∫–∏"""
        if user_id not in self.user_cookies:
            return None
        
        user_data = self.user_cookies[user_id]
        valid_cookies = user_data['valid_cookies']
        usernames = user_data['usernames']
        
        if not valid_cookies:
            return None
        
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        import zipfile
        timestamp = datetime.now().strftime("%H%M%S")
        zip_filename = f"individual_cookies_{user_id}_{timestamp}.zip"
        
        with zipfile.ZipFile(zip_filename, 'w') as zipf:
            for i, (cookie, username) in enumerate(zip(valid_cookies, usernames), 1):
                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                safe_username = re.sub(r'[^\w\-_]', '_', username)
                filename = f"cookie_{i}_{safe_username}.txt"
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(cookie)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ ZIP
                zipf.write(filename, filename)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(filename)
        
        return zip_filename

checker = RobloxCookieChecker()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Roblox –∫—É–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
        "–ü—Ä–æ—Å—Ç–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∑–∞–ø—É—Å–∫\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–û–ö:

‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checker.checked_count}
‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏: {checker.valid_count}
‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.checked_count - checker.valid_count}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö: {checker.valid_count/max(1, checker.checked_count)*100:.1f}%
"""
    await update.message.reply_text(stats_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if update.message.text:
        text_content = update.message.text
        await update.message.reply_text("üîç –ò—â—É –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ...")
        
        valid_cookies, invalid_cookies, process_results = checker.process_multiple_cookies(text_content, user_id)
        
        if not valid_cookies and not invalid_cookies:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if valid_cookies:
            keyboard = [
                [InlineKeyboardButton("üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–∞–π–ª–∞–º", callback_data="distribute_files")],
                [InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –æ–±—â–∏–π —Ñ–∞–π–ª", callback_data="download_combined")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            summary = f"""
üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:

‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(valid_cookies) + len(invalid_cookies)}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/(len(valid_cookies) + len(invalid_cookies))*100:.1f}%

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            await update.message.reply_text(summary, reply_markup=reply_markup)
        else:
            await send_results(update, user_id, valid_cookies, invalid_cookies, process_results)

    elif update.message.document:
        file = await update.message.document.get_file()
        file_path = f"temp_{user_id}.txt"
        await file.download_to_drive(file_path)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            file_content = f.read()
        
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        valid_cookies, invalid_cookies, process_results = checker.process_multiple_cookies(file_content, user_id)
        
        if not valid_cookies and not invalid_cookies:
            await update.message.reply_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫—É–∫–∏")
            os.remove(file_path)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if valid_cookies:
            keyboard = [
                [InlineKeyboardButton("üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–∞–π–ª–∞–º", callback_data="distribute_files")],
                [InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –æ–±—â–∏–π —Ñ–∞–π–ª", callback_data="download_combined")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            summary = f"""
üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:

‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(valid_cookies) + len(invalid_cookies)}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/(len(valid_cookies) + len(invalid_cookies))*100:.1f}%

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            await update.message.reply_text(summary, reply_markup=reply_markup)
        else:
            await send_results(update, user_id, valid_cookies, invalid_cookies, process_results)
        os.remove(file_path)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "distribute_files":
        await query.edit_message_text("üìÅ –°–æ–∑–¥–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫—É–∫–∏...")
        
        zip_filename = checker.create_individual_files(user_id)
        
        if zip_filename and os.path.exists(zip_filename):
            with open(zip_filename, 'rb') as zip_file:
                await query.message.reply_document(
                    document=zip_file,
                    caption=f"üìÅ –ê—Ä—Ö–∏–≤ —Å {len(checker.user_cookies[user_id]['valid_cookies'])} –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∫—É–∫–∏"
                )
            os.remove(zip_filename)
        else:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    
    elif query.data == "download_combined":
        await send_results(query, user_id, 
                          checker.user_cookies[user_id]['valid_cookies'], 
                          checker.user_cookies[user_id]['invalid_cookies'], 
                          "")

async def send_results(update, user_id, valid_cookies, invalid_cookies, process_results):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    timestamp = datetime.now().strftime("%H%M%S")
    
    # –°–≤–æ–¥–∫–∞
    total = len(valid_cookies) + len(invalid_cookies)
    summary = f"""
üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:

‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}
‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_cookies)}
‚Ä¢ ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_cookies)}
‚Ä¢ üìä –£—Å–ø–µ—Ö: {len(valid_cookies)/total*100:.1f}%
"""
    if hasattr(update, 'message'):
        await update.message.reply_text(summary)
    else:
        await update.edit_message_text(summary)
    
    if valid_cookies:
        valid_filename = f"valid_{user_id}_{timestamp}.txt"
        with open(valid_filename, 'w', encoding='utf-8') as f:
            for cookie in valid_cookies:
                f.write(cookie + '\n\n')
        
        caption = f"‚úÖ –í–ê–õ–ò–î–ù–´–ï –ö–£–ö–ò: {len(valid_cookies)} —à—Ç."
        if hasattr(update, 'message'):
            await update.message.reply_document(
                document=open(valid_filename, 'rb'),
                caption=caption
            )
        else:
            await update.message.reply_document(
                document=open(valid_filename, 'rb'),
                caption=caption
            )
        os.remove(valid_filename)
    
    if invalid_cookies:
        invalid_filename = f"invalid_{user_id}_{timestamp}.txt"
        with open(invalid_filename, 'w', encoding='utf-8') as f:
            for cookie in invalid_cookies:
                f.write(cookie + '\n\n')
        
        if hasattr(update, 'message'):
            await update.message.reply_document(
                document=open(invalid_filename, 'rb'),
                caption=f"‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ï –ö–£–ö–ò: {len(invalid_cookies)} —à—Ç."
            )
        else:
            await update.message.reply_document(
                document=open(invalid_filename, 'rb'),
                caption=f"‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ï –ö–£–ö–ò: {len(invalid_cookies)} —à—Ç."
            )
        os.remove(invalid_filename)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    print("ü§ñ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Roblox –∫—É–∫–∏ –∑–∞–ø—É—â–µ–Ω...")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
